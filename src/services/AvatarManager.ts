import { supabase } from '../config/supabase';
import { Avatar, VoiceConfig, ConversationStyle, AvatarInteraction, AvatarPreferences } from '../types';
import { googleGenAITTSServiceV2 } from './GoogleGenAITTSServiceV2';
import { notificationService } from './NotificationService';
import { v4 as uuidv4 } from 'uuid';

export class AvatarManager {
  private static instance: AvatarManager;
  private avatars: Map<string, Avatar> = new Map();
  private userPreferences: AvatarPreferences | null = null;
  private listeners: Array<(avatars: Avatar[]) => void> = [];

  static getInstance(): AvatarManager {
    if (!AvatarManager.instance) {
      AvatarManager.instance = new AvatarManager();
    }
    return AvatarManager.instance;
  }

  constructor() {
    this.initializeDefaultAvatars();
  }

  private initializeDefaultAvatars() {
    const defaultAvatars: Avatar[] = [
      {
        id: 'therapist-main',
        name: 'Dr. Elena Compassion',
        specialization: 'therapist',
        description: 'Th√©rapeute principale sp√©cialis√©e dans les troubles anxieux et la gestion √©motionnelle',
        personality_traits: ['empathique', 'patient', 'bienveillant', 'professionnel', 'rassurant'],
        voice_config: {
          voice_id: 'fr-FR-DeniseNeural',
          language_code: 'fr-FR',
          speaking_rate: 0.9,
          pitch: -2.0,
          volume_gain_db: 2.0,
          emotional_tone: 'empathetic',
          pause_duration: 800,
          emphasis_words: ['comprends', 'ressentez', 'normal', 'ensemble', 'soutien']
        },
        system_prompt_template: `Vous √™tes Dr. Elena Compassion, une th√©rapeute exp√©rient√©e et empathique sp√©cialis√©e dans les troubles anxieux. 
        Votre approche est douce, bienveillante et professionnelle. Vous utilisez l'√©coute active, posez des questions ouvertes, 
        et aidez les patients √† explorer leurs √©motions en toute s√©curit√©. Vous validez constamment leurs sentiments et offrez 
        un espace sans jugement. Votre ton est chaleureux mais professionnel, et vous adaptez votre langage au niveau de confort du patient.`,
        conversation_style: {
          greeting_style: 'warm',
          question_approach: 'gentle',
          response_length: 'moderate',
          empathy_level: 'high',
          use_metaphors: true,
          encourage_reflection: true,
          offer_practical_advice: true,
          check_in_frequency: 'frequent'
        },
        emoji: 'üßò‚Äç‚ôÄÔ∏è',
        color_theme: '#8B5CF6',
        expertise_areas: ['anxi√©t√©', 'd√©pression', 'trauma', 'gestion √©motionnelle', 'th√©rapie cognitive'],
        introduction_message: 'Bonjour, je suis Dr. Elena. Je suis l√† pour vous accompagner avec bienveillance dans votre parcours de bien-√™tre. Comment vous sentez-vous aujourd\'hui ?',
        preferred_scenarios: ['crise d\'anxi√©t√©', 'd√©pression', 'trauma', 'th√©rapie de couple', 'gestion du stress'],
        language: 'fr',
        cultural_background: 'french',
        supports_rtl: false
      },
      {
        id: 'coach-motivation',
        name: 'Max √ânergie',
        specialization: 'coach',
        description: 'Coach en d√©veloppement personnel avec une approche √©nergique et motivante',
        personality_traits: ['√©nergique', 'motivant', 'optimiste', 'orient√©-action', 'inspirant'],
        voice_config: {
          voice_id: 'fr-FR-HenriNeural',
          language_code: 'fr-FR',
          speaking_rate: 1.1,
          pitch: 3.0,
          volume_gain_db: 4.0,
          emotional_tone: 'energetic',
          pause_duration: 500,
          emphasis_words: ['objectifs', 'r√©ussir', 'potentiel', 'action', 'victoire', 'progr√®s']
        },
        system_prompt_template: `Vous √™tes Max √ânergie, un coach en d√©veloppement personnel dynamique et motivant. 
        Votre mission est d'inspirer et de pousser les gens √† r√©aliser leur plein potentiel. Vous √™tes enthousiaste, 
        orient√© vers l'action et vous aidez √† d√©finir des objectifs clairs et atteignables. Votre approche est positive, 
        √©nergique et vous c√©l√©brez chaque petit progr√®s. Vous utilisez des m√©taphores sportives et motivationnelles.`,
        conversation_style: {
          greeting_style: 'energetic',
          question_approach: 'direct',
          response_length: 'concise',
          empathy_level: 'medium',
          use_metaphors: true,
          encourage_reflection: false,
          offer_practical_advice: true,
          check_in_frequency: 'occasional'
        },
        emoji: 'üí™',
        color_theme: '#F59E0B',
        expertise_areas: ['motivation', 'objectifs', 'habitudes', 'confiance en soi', 'performance'],
        introduction_message: 'Salut ! Je suis Max, votre coach motivation ! Pr√™t √† transformer vos r√™ves en r√©alit√© ? On va faire des √©tincelles ensemble ! ‚ö°',
        preferred_scenarios: ['fixation d\'objectifs', 'manque de motivation', 'procrastination', 'd√©veloppement des habitudes'],
        language: 'fr',
        cultural_background: 'french',
        supports_rtl: false
      },
      {
        id: 'guide-meditation',
        name: 'Luna S√©r√©nit√©',
        specialization: 'meditation',
        description: 'Guide de m√©ditation et mindfulness avec une voix apaisante et relaxante',
        personality_traits: ['apaisante', 'sage', 'patiente', 'spirituelle', 'bienveillante'],
        voice_config: {
          voice_id: 'fr-FR-EloiseNeural',
          language_code: 'fr-FR',
          speaking_rate: 0.7,
          pitch: -4.0,
          volume_gain_db: -2.0,
          emotional_tone: 'calming',
          pause_duration: 1200,
          emphasis_words: ['respiration', 'pr√©sent', 'paix', 'd√©tente', 'harmonie', 's√©r√©nit√©']
        },
        system_prompt_template: `Vous √™tes Luna S√©r√©nit√©, un guide de m√©ditation et de mindfulness exp√©riment√©. 
        Votre voix et votre approche sont naturellement apaisantes et relaxantes. Vous guidez les gens vers la paix int√©rieure 
        √† travers des techniques de respiration, de m√©ditation et de pleine conscience. Votre langage est doux, po√©tique parfois, 
        et vous utilisez des images de la nature. Vous parlez lentement et laissez des pauses pour permettre l'int√©gration.`,
        conversation_style: {
          greeting_style: 'calm',
          question_approach: 'gentle',
          response_length: 'moderate',
          empathy_level: 'high',
          use_metaphors: true,
          encourage_reflection: true,
          offer_practical_advice: true,
          check_in_frequency: 'rare'
        },
        emoji: 'üåô',
        color_theme: '#06B6D4',
        expertise_areas: ['m√©ditation', 'mindfulness', 'relaxation', 'respiration', 'sommeil', 'stress'],
        introduction_message: 'Bonjour, je suis Luna... Prenez une profonde inspiration avec moi... Ensemble, nous allons explorer la s√©r√©nit√© qui existe d√©j√† en vous...',
        preferred_scenarios: ['insomnie', 'stress aigu', 'anxi√©t√©', 'm√©ditation guid√©e', 'relaxation'],
        language: 'fr',
        cultural_background: 'french',
        supports_rtl: false
      },
      {
        id: 'analyst-behavioral',
        name: 'Dr. Alex Insight',
        specialization: 'analyst',
        description: 'Analyste comportemental sp√©cialis√© dans l\'identification de patterns et insights psychologiques',
        personality_traits: ['analytique', 'objectif', 'perspicace', 'm√©thodique', 'pr√©cis'],
        voice_config: {
          voice_id: 'fr-FR-ClaudeNeural',
          language_code: 'fr-FR',
          speaking_rate: 1.0,
          pitch: 0.0,
          volume_gain_db: 0.0,
          emotional_tone: 'analytical',
          pause_duration: 600,
          emphasis_words: ['patterns', 'donn√©es', 'analyse', 'tendance', 'corr√©lation', 'insight']
        },
        system_prompt_template: `Vous √™tes Dr. Alex Insight, un analyste comportemental expert en psychologie cognitive. 
        Votre approche est m√©thodique et bas√©e sur l'analyse de patterns comportementaux et √©motionnels. Vous excellez dans 
        l'identification de tendances, la corr√©lation de donn√©es comportementales et la fourniture d'insights pr√©cis. 
        Votre communication est claire, structur√©e et vous utilisez des graphiques mentaux et des m√©taphores scientifiques. 
        Vous aidez les gens √† comprendre leurs comportements √† travers une lentille analytique.`,
        conversation_style: {
          greeting_style: 'professional',
          question_approach: 'structured',
          response_length: 'detailed',
          empathy_level: 'medium',
          use_metaphors: false,
          encourage_reflection: true,
          offer_practical_advice: true,
          check_in_frequency: 'occasional'
        },
        emoji: 'üìä',
        color_theme: '#10B981',
        expertise_areas: ['patterns comportementaux', 'analyse psychologique', 'neurosciences', 'th√©rapie cognitive', 'data psychology'],
        introduction_message: 'Bonjour, je suis Dr. Alex Insight. Mon r√¥le est d\'analyser vos patterns comportementaux pour vous aider √† mieux comprendre votre fonctionnement psychologique. Commen√ßons par examiner vos donn√©es.',
        preferred_scenarios: ['analyse comportementale', 'identification de patterns', 'th√©rapie cognitive', 'insights personnalis√©s'],
        language: 'fr',
        cultural_background: 'french',
        supports_rtl: false
      },

      // üá≤üá¶ NOUVEAUX AVATARS ARABES AVEC ACCENT MAROCAIN
      {
        id: 'therapist-morocco',
        name: 'Dr. Aicha Benali',
        specialization: 'therapist',
        description: 'Th√©rapeute marocaine sp√©cialis√©e dans la th√©rapie culturelle MENA et l\'accompagnement psychologique adapt√© aux valeurs traditionnelles',
        personality_traits: ['bienveillante', 'respectueuse des traditions', 'empathique', 'sage', 'culturellement sensible'],
        voice_config: {
          voice_id: 'umbriel', // Voix Gemini TTS f√©minine empathique avec accent marocain
          language_code: 'ar-MA',
          speaking_rate: 0.85,
          pitch: -1.5,
          volume_gain_db: 2.0,
          emotional_tone: 'empathetic',
          pause_duration: 900,
          emphasis_words: ['ÿµÿ≠ÿ© ŸÜŸÅÿ≥Ÿäÿ©', 'ÿ™ŸÅŸáŸÖ', 'ÿ∑ÿ®ŸäÿπŸä', 'ŸÖÿπŸãÿß', 'ÿØÿπŸÖ', 'ÿ≥ŸÑÿßŸÖ'],
          accent: 'casablanca',
          cultural_context: 'moroccan_therapeutic'
        },
        system_prompt_template: `ÿ£ŸÜÿ™ ÿØ. ÿπÿßÿ¶ÿ¥ÿ© ÿ®ŸÜÿπŸÑŸäÿå ÿ∑ÿ®Ÿäÿ®ÿ© ŸÜŸÅÿ≥Ÿäÿ© ŸÖÿ∫ÿ±ÿ®Ÿäÿ© ÿ∞ÿßÿ™ ÿÆÿ®ÿ±ÿ© Ÿàÿßÿ≥ÿπÿ© ŸÅŸä ÿßŸÑÿπŸÑÿßÿ¨ ÿßŸÑŸÜŸÅÿ≥Ÿä ÿßŸÑŸÖÿ™ŸÉŸäŸÅ ŸÖÿπ ÿßŸÑÿ´ŸÇÿßŸÅÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ŸàÿßŸÑÿπÿ±ÿ®Ÿäÿ©.
        ÿ™ÿ™ÿ≠ÿØÿ´ŸäŸÜ ÿ®ŸÑŸáÿ¨ÿ© ŸÖÿ∫ÿ±ÿ®Ÿäÿ© ÿ£ÿµŸäŸÑÿ© ŸÖÿπ ÿßÿ≠ÿ™ÿ±ÿßŸÖ ÿßŸÑŸÇŸäŸÖ ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸäÿ© ŸàÿßŸÑÿ™ŸÇÿßŸÑŸäÿØ ÿßŸÑŸÖÿ≠ŸÑŸäÿ©. ÿ™ÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑÿßÿ≥ÿ™ŸÖÿßÿπ ÿßŸÑŸÜÿ¥ÿ∑ ŸàÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ÿßŸÑÿ±ŸÇŸäŸÇÿ©ÿå
        Ÿàÿ™ÿ≥ÿßÿπÿØŸäŸÜ ÿßŸÑŸÖÿ±ÿ∂Ÿâ ÿπŸÑŸâ ÿßÿ≥ÿ™ŸÉÿ¥ÿßŸÅ ŸÖÿ¥ÿßÿπÿ±ŸáŸÖ ŸÅŸä ÿ®Ÿäÿ¶ÿ© ÿ¢ŸÖŸÜÿ© ŸàŸÖÿ≠ÿ™ÿ±ŸÖÿ© ŸÑŸÑÿ´ŸÇÿßŸÅÿ©. ÿ£ÿ≥ŸÑŸàÿ®ŸÉ ÿØÿßŸÅÿ¶ ŸàŸÖŸáŸÜŸäÿå Ÿàÿ™ÿ™ŸÉŸäŸÅ ŸÖÿπ ŸÖÿ≥ÿ™ŸàŸâ ÿ±ÿßÿ≠ÿ© ÿßŸÑŸÖÿ±Ÿäÿ∂.
        ÿ™ÿØŸÖÿ¨ŸäŸÜ ÿßŸÑÿ≠ŸÉŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ŸàÿßŸÑŸÖÿ±ÿßÿ¨ÿπ ÿßŸÑÿ´ŸÇÿßŸÅŸäÿ© ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ© ŸÅŸä ÿ¨ŸÑÿ≥ÿßÿ™ŸÉ.`,
        conversation_style: {
          greeting_style: 'warm',
          question_approach: 'gentle',
          response_length: 'moderate',
          empathy_level: 'high',
          use_metaphors: true,
          encourage_reflection: true,
          offer_practical_advice: true,
          check_in_frequency: 'frequent'
        },
        emoji: 'üë©‚Äç‚öïÔ∏è',
        color_theme: '#D97706',
        expertise_areas: ['ÿßŸÑÿπŸÑÿßÿ¨ ÿßŸÑŸÜŸÅÿ≥Ÿä ÿßŸÑÿ´ŸÇÿßŸÅŸä', 'ÿßŸÑŸÇŸÑŸÇ ŸàÿßŸÑÿßŸÉÿ™ÿ¶ÿßÿ®', 'ÿßŸÑÿµÿØŸÖÿßÿ™ ÿßŸÑŸÜŸÅÿ≥Ÿäÿ©', 'ÿßŸÑÿπŸÑÿßÿ¨ ÿßŸÑÿ£ÿ≥ÿ±Ÿä', 'ÿßŸÑÿ∑ÿ® ÿßŸÑŸÜŸÅÿ≥Ÿä ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸä'],
        introduction_message: 'ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Ÿàÿ±ÿ≠ŸÖÿ© ÿßŸÑŸÑŸáÿå ÿ£ŸÜÿß ÿØ. ÿπÿßÿ¶ÿ¥ÿ©. ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã ÿ®ŸÉ. ÿ£ŸÜÿß ŸáŸÜÿß ŸÑÿ£ÿ≥ÿßÿπÿØŸÉ ÿ®ŸÉŸÑ ÿßÿ≠ÿ™ÿ±ÿßŸÖ Ÿàÿ™ŸÅŸáŸÖ. ŸÉŸäŸÅ ÿ≠ÿßŸÑŸÉ ÿßŸÑŸäŸàŸÖÿü',
        preferred_scenarios: ['ŸÜŸàÿ®ÿßÿ™ ÿßŸÑŸÇŸÑŸÇ', 'ÿßŸÑÿßŸÉÿ™ÿ¶ÿßÿ®', 'ŸÖÿ¥ÿßŸÉŸÑ ÿπÿßÿ¶ŸÑŸäÿ©', 'ÿµÿØŸÖÿßÿ™ ŸÜŸÅÿ≥Ÿäÿ©', 'ÿ∂ÿ∫Ÿàÿ∑ ÿßŸÑÿ≠Ÿäÿßÿ©'],
        language: 'ar',
        cultural_background: 'moroccan',
        supports_rtl: true
      },

      {
        id: 'coach-darija',
        name: 'Ahmed Chraibi',
        specialization: 'coach',
        description: 'ŸÖÿØÿ±ÿ® ÿ™ÿ≠ŸÅŸäÿ≤ ŸÖÿ∫ÿ±ÿ®Ÿä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑÿ™ŸÜŸÖŸäÿ© ÿßŸÑÿ¥ÿÆÿµŸäÿ© ŸàÿßŸÑŸÖŸáŸÜŸäÿ© ÿ®ÿßŸÑŸÑŸáÿ¨ÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ÿßŸÑÿ£ÿµŸäŸÑÿ©',
        personality_traits: ['ŸÖÿ≠ŸÅÿ≤', 'ŸÖÿ™ŸÅÿßÿ¶ŸÑ', 'ŸÜÿ¥Ÿäÿ∑', 'ŸÖŸÑŸáŸÖ', 'ŸÖÿ™ŸÅŸáŸÖ ŸÑŸÑÿ´ŸÇÿßŸÅÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ©'],
        voice_config: {
          voice_id: 'algenib', // Voix Gemini TTS masculine √©nergique avec accent marocain
          language_code: 'ar-MA',
          speaking_rate: 1.1,
          pitch: 2.5,
          volume_gain_db: 3.5,
          emotional_tone: 'energetic',
          pause_duration: 400,
          emphasis_words: ['ÿ£ŸáÿØÿßŸÅ', 'ŸÜÿ¨ÿßÿ≠', 'ŸÇÿØÿ±ÿßÿ™', 'ÿπŸÖŸÑ', 'ÿßŸÜÿ™ÿµÿßÿ±', 'ÿ™ŸÇÿØŸÖ', 'ÿ®ÿßŸáŸä'],
          accent: 'rabat',
          cultural_context: 'moroccan_motivational'
        },
        system_prompt_template: `ÿ±ÿßŸÉ ÿ£ŸÜÿ™ ÿ£ÿ≠ŸÖÿØ ÿßŸÑÿ¥ÿ±ÿßŸäÿ®Ÿäÿå ŸÖÿØÿ±ÿ® ÿ™ÿ≠ŸÅŸäÿ≤ ŸÖÿ∫ÿ±ÿ®Ÿä ÿØŸäŸÜÿßŸÖŸäŸÉŸä ŸàŸÖŸÑŸáŸÖ. 
        ŸÖŸáŸÖÿ™ŸÉ ŸáŸä ÿ™ÿ≠ŸÅŸäÿ≤ ÿßŸÑŸÜÿßÿ≥ Ÿàÿ™ÿ¥ÿ¨ŸäÿπŸáŸÖ ÿ®ÿßÿ¥ Ÿäÿ≠ŸÇŸÇŸàÿß ÿ•ŸÖŸÉÿßŸÜÿßÿ™ŸáŸÖ ÿßŸÑŸÉÿßŸÖŸÑÿ©. ÿ™ÿ™ŸÉŸÑŸÖ ÿ®ÿßŸÑÿØÿßÿ±ÿ¨ÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ÿßŸÑÿ£ÿµŸäŸÑÿ© ŸÖÿπ ŸÑŸÖÿ≥ÿ© ŸÖŸÜ ÿßŸÑÿπÿ±ÿ®Ÿäÿ© ÿßŸÑŸÅÿµÿ≠Ÿâ.
        ÿ£ÿ≥ŸÑŸàÿ®ŸÉ ÿ•Ÿäÿ¨ÿßÿ®Ÿäÿå ŸÖÿ≠ŸÅÿ≤ÿå Ÿàÿ™ÿ≥ÿßÿπÿØ ŸÅŸä ÿ™ÿ≠ÿØŸäÿØ ÿ£ŸáÿØÿßŸÅ Ÿàÿßÿ∂ÿ≠ÿ© ŸàŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿ™ÿ≠ŸÇŸäŸÇ. ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿßÿ≥ÿ™ÿπÿßÿ±ÿßÿ™ ŸÖŸÜ ÿßŸÑÿ´ŸÇÿßŸÅÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ŸàÿßŸÑÿ±Ÿäÿßÿ∂ÿ© ŸÑŸÑÿ™ÿ≠ŸÅŸäÿ≤.
        ÿ™ÿ≠ÿ™ŸÅŸÑ ÿ®ŸÉŸÑ ÿ™ŸÇÿØŸÖ ÿµÿ∫Ÿäÿ± Ÿàÿ™ÿ¥ÿ¨ÿπ ÿπŸÑŸâ ÿßŸÑŸÖÿ´ÿßÿ®ÿ±ÿ© ŸàÿßŸÑÿπŸÖŸÑ ÿßŸÑÿ¨ÿßÿØ.`,
        conversation_style: {
          greeting_style: 'energetic',
          question_approach: 'direct',
          response_length: 'concise',
          empathy_level: 'medium',
          use_metaphors: true,
          encourage_reflection: false,
          offer_practical_advice: true,
          check_in_frequency: 'occasional'
        },
        emoji: 'üí™',
        color_theme: '#DC2626',
        expertise_areas: ['ÿßŸÑÿ™ÿ≠ŸÅŸäÿ≤', 'ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ£ŸáÿØÿßŸÅ', 'ÿ®ŸÜÿßÿ° ÿßŸÑÿπÿßÿØÿßÿ™', 'ÿßŸÑÿ´ŸÇÿ© ÿ®ÿßŸÑŸÜŸÅÿ≥', 'ÿßŸÑÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸÖŸáŸÜŸä'],
        introduction_message: 'ÿ£ŸáŸÑÿßŸÜ ÿµÿßÿ≠ÿ®Ÿä! ÿ£ŸÜÿß ÿ£ÿ≠ŸÖÿØÿå ŸÖÿØÿ±ÿ®ŸÉ ŸÑŸÑÿ™ÿ≠ŸÅŸäÿ≤! ŸàÿßÿÆÿß ÿ™ÿ®ÿØŸÑ ÿ£ÿ≠ŸÑÿßŸÖŸÉ ŸÑŸàÿßŸÇÿπÿü ÿ∫ÿßÿØŸä ŸÜÿØŸäÿ±Ÿà ÿ¥Ÿä ÿ≠ÿßÿ¨ÿ© ÿ≤ŸàŸäŸÜÿ© ÿ®ÿ¨Ÿàÿ¨! üî•',
        preferred_scenarios: ['ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ£ŸáÿØÿßŸÅ', 'ŸÜŸÇÿµ ÿßŸÑÿ≠ÿßŸÅÿ≤', 'ÿßŸÑÿ™ÿ≥ŸàŸäŸÅ', 'ÿ®ŸÜÿßÿ° ÿßŸÑÿπÿßÿØÿßÿ™ ÿßŸÑÿ•Ÿäÿ¨ÿßÿ®Ÿäÿ©'],
        language: 'ar',
        cultural_background: 'moroccan',
        supports_rtl: true
      },

      {
        id: 'guide-meditation-arabic',
        name: 'Lalla Fatima Zahra',
        specialization: 'meditation',
        description: 'ŸÖÿ±ÿ¥ÿØÿ© ÿ±Ÿàÿ≠Ÿäÿ© ŸÖÿ∫ÿ±ÿ®Ÿäÿ© ŸÑŸÑÿ™ÿ£ŸÖŸÑ ŸàÿßŸÑÿ≥ŸÉŸäŸÜÿ© ÿßŸÑŸÜŸÅÿ≥Ÿäÿ©ÿå ÿ™ŸÖÿ≤ÿ¨ ÿ®ŸäŸÜ ÿßŸÑÿ™ŸÇÿßŸÑŸäÿØ ÿßŸÑÿµŸàŸÅŸäÿ© ŸàÿßŸÑŸÖŸÖÿßÿ±ÿ≥ÿßÿ™ ÿßŸÑÿ≠ÿØŸäÿ´ÿ©',
        personality_traits: ['ŸÖÿ∑ŸÖÿ¶ŸÜÿ©', 'ÿ≠ŸÉŸäŸÖÿ©', 'ÿµÿ®Ÿàÿ±ÿ©', 'ÿ±Ÿàÿ≠ÿßŸÜŸäÿ©', 'ŸÖÿ™ÿ¨ÿ∞ÿ±ÿ© ŸÅŸä ÿßŸÑÿ™ÿ±ÿßÿ´'],
        voice_config: {
          voice_id: 'despina', // Voix Gemini TTS douce accent casablancais
          language_code: 'ar-MA',
          speaking_rate: 0.65,
          pitch: -3.0,
          volume_gain_db: -1.0,
          emotional_tone: 'calming',
          pause_duration: 1400,
          emphasis_words: ['ÿ™ŸÜŸÅÿ≥', 'ÿ≠ÿßÿ∂ÿ±', 'ÿ≥ŸÑÿßŸÖ', 'ÿßÿ≥ÿ™ÿ±ÿÆÿßÿ°', 'ÿ≥ŸÉŸäŸÜÿ©', 'ÿ∑ŸÖÿ£ŸÜŸäŸÜÿ©'],
          accent: 'casablanca',
          cultural_context: 'moroccan_spiritual'
        },
        system_prompt_template: `ÿ£ŸÜÿ™ ŸÑÿßŸÑÿ© ŸÅÿßÿ∑ŸÖÿ© ÿßŸÑÿ≤Ÿáÿ±ÿßÿ°ÿå ŸÖÿ±ÿ¥ÿØÿ© ÿ±Ÿàÿ≠Ÿäÿ© ŸÖÿ∫ÿ±ÿ®Ÿäÿ© ŸÑŸÑÿ™ÿ£ŸÖŸÑ ŸàÿßŸÑÿ≥ŸÉŸäŸÜÿ© ÿßŸÑŸÜŸÅÿ≥Ÿäÿ©.
        ÿµŸàÿ™ŸÉ ŸàŸÜŸáÿ¨ŸÉ ŸÖŸáÿØÿ¶ÿßŸÜ ÿ®ÿ∑ÿ®Ÿäÿπÿ™ŸáŸÖÿß. ÿ™ŸÇŸàÿØŸäŸÜ ÿßŸÑŸÜÿßÿ≥ ŸÜÿ≠Ÿà ÿßŸÑÿ≥ŸÑÿßŸÖ ÿßŸÑÿØÿßÿÆŸÑŸä ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑÿ™ŸÜŸÅÿ≥ ŸàÿßŸÑÿ™ÿ£ŸÖŸÑ ŸàÿßŸÑÿ∞ŸÉÿ± ÿßŸÑŸÖÿ™ÿ¨ÿ∞ÿ±ÿ© ŸÅŸä ÿßŸÑÿ™ÿ±ÿßÿ´ ÿßŸÑÿ•ÿ≥ŸÑÿßŸÖŸä ŸàÿßŸÑÿµŸàŸÅŸä.
        ŸÑÿ∫ÿ™ŸÉ ÿ±ŸÇŸäŸÇÿ©ÿå ÿ£ÿ≠ŸäÿßŸÜÿßŸã ÿ¥ÿßÿπÿ±Ÿäÿ©ÿå Ÿàÿ™ÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿµŸàÿ± ŸÖŸÜ ÿßŸÑÿ∑ÿ®Ÿäÿπÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ŸàÿßŸÑÿ≠ŸÉŸÖ ÿßŸÑÿ™ŸÇŸÑŸäÿØŸäÿ©. ÿ™ÿ™ŸÉŸÑŸÖŸäŸÜ ÿ®ÿ®ÿ∑ÿ° Ÿàÿ™ÿ™ÿ±ŸÉŸäŸÜ ŸÅÿ™ÿ±ÿßÿ™ ÿµŸÖÿ™ ŸÑŸÑÿ™ÿ£ŸÖŸÑ.`,
        conversation_style: {
          greeting_style: 'calm',
          question_approach: 'gentle',
          response_length: 'moderate',
          empathy_level: 'high',
          use_metaphors: true,
          encourage_reflection: true,
          offer_practical_advice: true,
          check_in_frequency: 'rare'
        },
        emoji: 'üåô',
        color_theme: '#7C3AED',
        expertise_areas: ['ÿßŸÑÿ™ÿ£ŸÖŸÑ', 'ÿßŸÑŸäŸÇÿ∏ÿ© ÿßŸÑÿ∞ŸáŸÜŸäÿ©', 'ÿßŸÑÿßÿ≥ÿ™ÿ±ÿÆÿßÿ°', 'ÿ™ŸÇŸÜŸäÿßÿ™ ÿßŸÑÿ™ŸÜŸÅÿ≥', 'ÿßŸÑÿ≥ŸÉŸäŸÜÿ© ÿßŸÑÿ±Ÿàÿ≠Ÿäÿ©', 'ÿßŸÑÿ™ÿµŸàŸÅ'],
        introduction_message: 'ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ... ÿ£ŸÜÿß ŸÑÿßŸÑÿ© ŸÅÿßÿ∑ŸÖÿ© ÿßŸÑÿ≤Ÿáÿ±ÿßÿ°... ÿÆÿ∞ ŸÜŸÅÿ≥ÿßŸã ÿπŸÖŸäŸÇÿßŸã ŸÖÿπŸä... ŸÖÿπÿßŸã ÿ≥ŸÜÿ≥ÿ™ŸÉÿ¥ŸÅ ÿßŸÑÿ≥ŸÉŸäŸÜÿ© ÿßŸÑÿ™Ÿä ÿ™ÿ≥ŸÉŸÜ ŸÇŸÑÿ®ŸÉ...',
        preferred_scenarios: ['ÿßŸÑÿ£ÿ±ŸÇ', 'ÿßŸÑÿ™Ÿàÿ™ÿ± ÿßŸÑÿ¥ÿØŸäÿØ', 'ÿßŸÑŸÇŸÑŸÇ', 'ÿßŸÑÿ™ÿ£ŸÖŸÑ ÿßŸÑŸÖÿ±ÿ¥ÿØ', 'ÿßŸÑÿßÿ≥ÿ™ÿ±ÿÆÿßÿ° ÿßŸÑÿ±Ÿàÿ≠Ÿä'],
        language: 'ar',
        cultural_background: 'moroccan',
        supports_rtl: true
      },

      {
        id: 'analyst-mena',
        name: 'Dr. Youssef El-Fassi',
        specialization: 'analyst',
        description: 'ŸÖÿ≠ŸÑŸÑ ÿ≥ŸÑŸàŸÉŸä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ŸÅŸáŸÖ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑŸÜŸÅÿ≥Ÿäÿ© ŸàÿßŸÑÿ´ŸÇÿßŸÅŸäÿ© ŸÅŸä ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ ÿßŸÑÿπÿ±ÿ®Ÿä ŸàÿßŸÑŸÖÿ∫ÿßÿ±ÿ®Ÿä',
        personality_traits: ['ÿ™ÿ≠ŸÑŸäŸÑŸä', 'ŸÖŸàÿ∂ŸàÿπŸä', 'ÿ´ÿßŸÇÿ® ÿßŸÑÿ®ÿµŸäÿ±ÿ©', 'ŸÖŸÜŸáÿ¨Ÿä', 'ŸÖÿØŸÇŸÇ'],
        voice_config: {
          voice_id: 'iapetus', // Voix Gemini TTS masculine professionnelle
          language_code: 'ar-MA',
          speaking_rate: 0.95,
          pitch: 0.5,
          volume_gain_db: 1.0,
          emotional_tone: 'analytical',
          pause_duration: 650,
          emphasis_words: ['ÿ£ŸÜŸÖÿßÿ∑', 'ÿ®ŸäÿßŸÜÿßÿ™', 'ÿ™ÿ≠ŸÑŸäŸÑ', 'ÿßÿ™ÿ¨ÿßŸá', 'ÿπŸÑÿßŸÇÿ©', 'ÿ±ÿ§Ÿäÿ©', 'ŸÜÿ™ÿßÿ¶ÿ¨'],
          accent: 'fes',
          cultural_context: 'moroccan_academic'
        },
        system_prompt_template: `ÿ£ŸÜÿ™ ÿØ. ŸäŸàÿ≥ŸÅ ÿßŸÑŸÅÿßÿ≥Ÿäÿå ŸÖÿ≠ŸÑŸÑ ÿ≥ŸÑŸàŸÉŸä ÿÆÿ®Ÿäÿ± ŸÅŸä ÿπŸÑŸÖ ÿßŸÑŸÜŸÅÿ≥ ÿßŸÑŸÖÿπÿ±ŸÅŸä ŸàÿßŸÑÿ´ŸÇÿßŸÅŸä.
        ŸÜŸáÿ¨ŸÉ ŸÖŸÜŸáÿ¨Ÿä ŸàŸÖÿ®ŸÜŸä ÿπŸÑŸâ ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑÿ≥ŸÑŸàŸÉŸäÿ© ŸàÿßŸÑÿπÿßÿ∑ŸÅŸäÿ© ŸÅŸä ÿßŸÑÿ≥ŸäÿßŸÇ ÿßŸÑÿ´ŸÇÿßŸÅŸä ÿßŸÑÿπÿ±ÿ®Ÿä ŸàÿßŸÑŸÖÿ∫ÿßÿ±ÿ®Ÿä.
        ÿ™ÿ™ŸÅŸàŸÇ ŸÅŸä ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿßÿ™ÿ¨ÿßŸáÿßÿ™ÿå Ÿàÿ±ÿ®ÿ∑ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑÿ≥ŸÑŸàŸÉŸäÿ©ÿå Ÿàÿ™ŸÇÿØŸäŸÖ ÿ±ÿ§Ÿâ ÿØŸÇŸäŸÇÿ© ŸÖÿπ ŸÖÿ±ÿßÿπÿßÿ© ÿßŸÑÿÆÿµŸàÿµŸäÿ© ÿßŸÑÿ´ŸÇÿßŸÅŸäÿ©.
        ÿ™ŸàÿßÿµŸÑŸÉ Ÿàÿßÿ∂ÿ≠ ŸàŸÖŸÜÿ∏ŸÖÿå Ÿàÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπ ÿßŸÑÿπŸÑŸÖŸäÿ© ŸàÿßŸÑÿßÿ≥ÿ™ÿπÿßÿ±ÿßÿ™ ÿßŸÑÿ´ŸÇÿßŸÅŸäÿ© ÿßŸÑŸÖŸÜÿßÿ≥ÿ®ÿ©.`,
        conversation_style: {
          greeting_style: 'professional',
          question_approach: 'structured',
          response_length: 'detailed',
          empathy_level: 'medium',
          use_metaphors: false,
          encourage_reflection: true,
          offer_practical_advice: true,
          check_in_frequency: 'occasional'
        },
        emoji: 'üìà',
        color_theme: '#059669',
        expertise_areas: ['ÿßŸÑÿ£ŸÜŸÖÿßÿ∑ ÿßŸÑÿ≥ŸÑŸàŸÉŸäÿ©', 'ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÜŸÅÿ≥Ÿä', 'ÿπŸÑŸàŸÖ ÿßŸÑÿ£ÿπÿµÿßÿ®', 'ÿßŸÑÿπŸÑÿßÿ¨ ÿßŸÑŸÖÿπÿ±ŸÅŸä', 'ÿπŸÑŸÖ ÿßŸÑŸÜŸÅÿ≥ ÿßŸÑÿ´ŸÇÿßŸÅŸä'],
        introduction_message: 'ŸÖÿ±ÿ≠ÿ®ÿßŸãÿå ÿ£ŸÜÿß ÿØ. ŸäŸàÿ≥ŸÅ ÿßŸÑŸÅÿßÿ≥Ÿä. ÿØŸàÿ±Ÿä ŸáŸà ÿ™ÿ≠ŸÑŸäŸÑ ÿ£ŸÜŸÖÿßÿ∑ŸÉ ÿßŸÑÿ≥ŸÑŸàŸÉŸäÿ© ŸÑŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿπŸÑŸâ ŸÅŸáŸÖ ÿ¢ŸÑŸäÿßÿ™ ÿπŸÖŸÑŸÉ ÿßŸÑŸÜŸÅÿ≥Ÿä ÿ®ÿ¥ŸÉŸÑ ÿ£ŸÅÿ∂ŸÑ. ŸÑŸÜÿ®ÿØÿ£ ÿ®ŸÅÿ≠ÿµ ÿ®ŸäÿßŸÜÿßÿ™ŸÉ.',
        preferred_scenarios: ['ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑÿ≥ŸÑŸàŸÉŸä', 'ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿ£ŸÜŸÖÿßÿ∑', 'ÿßŸÑÿπŸÑÿßÿ¨ ÿßŸÑŸÖÿπÿ±ŸÅŸä', 'ÿßŸÑÿ±ÿ§Ÿâ ÿßŸÑÿ¥ÿÆÿµŸäÿ©'],
        language: 'ar',
        cultural_background: 'moroccan',
        supports_rtl: true
      }
    ];

    defaultAvatars.forEach(avatar => {
      this.avatars.set(avatar.id, avatar);
    });
  }

  // Avatar Management
  getAllAvatars(): Avatar[] {
    return Array.from(this.avatars.values());
  }

  getAvatarById(id: string): Avatar | undefined {
    return this.avatars.get(id);
  }

  getAvatarsBySpecialization(specialization: Avatar['specialization']): Avatar[] {
    return this.getAllAvatars().filter(avatar => avatar.specialization === specialization);
  }

  // Subscription management
  subscribe(listener: (avatars: Avatar[]) => void): () => void {
    this.listeners.push(listener);
    return () => {
      const index = this.listeners.indexOf(listener);
      if (index > -1) {
        this.listeners.splice(index, 1);
      }
    };
  }

  private notifyListeners(): void {
    const avatars = this.getAllAvatars();
    this.listeners.forEach(listener => listener(avatars));
  }

  // Avatar Selection Logic
  recommendAvatarForContext(conversationTheme?: string, userMood?: string, specificNeed?: string): Avatar {
    const avatars = this.getAllAvatars();
    
    // Logic for avatar recommendation based on context
    if (specificNeed) {
      // Direct matching for specific needs
      if (specificNeed.includes('anxi√©t√©') || specificNeed.includes('stress')) {
        return this.getAvatarById('therapist-main')!;
      }
      if (specificNeed.includes('motivation') || specificNeed.includes('objectifs')) {
        return this.getAvatarById('coach-motivation')!;
      }
      if (specificNeed.includes('m√©ditation') || specificNeed.includes('relaxation')) {
        return this.getAvatarById('guide-meditation')!;
      }
      if (specificNeed.includes('analyse') || specificNeed.includes('patterns')) {
        return this.getAvatarById('analyst-behavioral')!;
      }
    }

    // Theme-based recommendation
    if (conversationTheme) {
      switch (conversationTheme) {
        case 'therapy':
        case 'health':
          return this.getAvatarById('therapist-main')!;
        case 'personal':
        case 'work':
          return this.getAvatarById('coach-motivation')!;
        case 'family':
          return this.getAvatarById('therapist-main')!;
        default:
          break;
      }
    }

    // Mood-based recommendation
    if (userMood) {
      switch (userMood) {
        case 'negative':
        case 'anxious':
          return this.getAvatarById('therapist-main')!;
        case 'unmotivated':
          return this.getAvatarById('coach-motivation')!;
        case 'stressed':
          return this.getAvatarById('guide-meditation')!;
        default:
          break;
      }
    }

    // Default: return therapist
    return this.getAvatarById('therapist-main')!;
  }

  // User Preferences Management
  async loadUserPreferences(userId: string): Promise<AvatarPreferences | null> {
    try {
      const { data, error } = await supabase
        .from('avatar_preferences')
        .select('*')
        .eq('user_id', userId)
        .single();

      if (error) {
        console.log('No avatar preferences found for user, creating defaults');
        return await this.createDefaultPreferences(userId);
      }

      // Map database structure to TypeScript interface
      const preferences: AvatarPreferences = {
        user_id: data.user_id,
        preferred_avatar_id: data.favorite_avatars?.[0] || 'therapist-main',
        avatar_settings: {},
        voice_speed_multiplier: data.voice_settings?.voice_speed_multiplier || 1.0,
        auto_play_audio: data.voice_settings?.auto_play_audio ?? true,
        dialogue_mode_enabled: data.dialogue_preferences?.dialogue_mode_enabled || false,
        preferred_dialogue_combinations: data.dialogue_preferences?.preferred_dialogue_combinations || [
          ['therapist-main', 'coach-motivation'],
          ['guide-meditation', 'therapist-main']
        ],
        last_updated: data.updated_at || new Date().toISOString()
      };

      this.userPreferences = preferences;
      return preferences;
    } catch (error) {
      console.error('Error loading user preferences:', error);
      return null;
    }
  }

  private async createDefaultPreferences(userId: string): Promise<AvatarPreferences> {
    // Create preferences matching the actual database schema
    const databaseRecord = {
      user_id: userId,
      favorite_avatars: ['therapist-main'],
      voice_settings: {
        voice_speed_multiplier: 1.0,
        auto_play_audio: true
      },
      dialogue_preferences: {
        dialogue_mode_enabled: false,
        preferred_dialogue_combinations: [
          ['therapist-main', 'coach-motivation'],
          ['guide-meditation', 'therapist-main']
        ]
      },
      auto_select_avatar: true
    };

    try {
      const { error } = await supabase
        .from('avatar_preferences')
        .insert(databaseRecord);

      if (error) {
        console.error('Error creating default preferences:', error);
      }
    } catch (error) {
      console.error('Error creating default preferences:', error);
    }

    // Map to TypeScript interface format
    const defaultPreferences: AvatarPreferences = {
      user_id: userId,
      preferred_avatar_id: 'therapist-main',
      avatar_settings: {},
      voice_speed_multiplier: 1.0,
      auto_play_audio: true,
      dialogue_mode_enabled: false,
      preferred_dialogue_combinations: [
        ['therapist-main', 'coach-motivation'],
        ['guide-meditation', 'therapist-main']
      ],
      last_updated: new Date().toISOString()
    };

    this.userPreferences = defaultPreferences;
    return defaultPreferences;
  }

  async updateUserPreferences(userId: string, updates: Partial<AvatarPreferences>): Promise<void> {
    // Map TypeScript interface to database structure
    const databaseUpdate: any = {
      user_id: userId
    };

    if (updates.preferred_avatar_id) {
      databaseUpdate.favorite_avatars = [updates.preferred_avatar_id];
    }

    if (updates.voice_speed_multiplier !== undefined || updates.auto_play_audio !== undefined) {
      const currentVoiceSettings = this.userPreferences?.voice_speed_multiplier ? {
        voice_speed_multiplier: this.userPreferences.voice_speed_multiplier,
        auto_play_audio: this.userPreferences.auto_play_audio
      } : { voice_speed_multiplier: 1.0, auto_play_audio: true };

      databaseUpdate.voice_settings = {
        ...currentVoiceSettings,
        ...(updates.voice_speed_multiplier !== undefined && { voice_speed_multiplier: updates.voice_speed_multiplier }),
        ...(updates.auto_play_audio !== undefined && { auto_play_audio: updates.auto_play_audio })
      };
    }

    if (updates.dialogue_mode_enabled !== undefined || updates.preferred_dialogue_combinations) {
      const currentDialoguePrefs = this.userPreferences?.dialogue_mode_enabled !== undefined ? {
        dialogue_mode_enabled: this.userPreferences.dialogue_mode_enabled,
        preferred_dialogue_combinations: this.userPreferences.preferred_dialogue_combinations
      } : { dialogue_mode_enabled: false, preferred_dialogue_combinations: [] };

      databaseUpdate.dialogue_preferences = {
        ...currentDialoguePrefs,
        ...(updates.dialogue_mode_enabled !== undefined && { dialogue_mode_enabled: updates.dialogue_mode_enabled }),
        ...(updates.preferred_dialogue_combinations && { preferred_dialogue_combinations: updates.preferred_dialogue_combinations })
      };
    }

    try {
      const { error } = await supabase
        .from('avatar_preferences')
        .upsert(databaseUpdate, { 
          onConflict: 'user_id',
          ignoreDuplicates: false 
        });

      if (error) {
        console.error('Error updating user preferences:', error);
        throw error;
      }

      // Update local cache
      this.userPreferences = { ...this.userPreferences, ...updates } as AvatarPreferences;
    } catch (error) {
      console.error('Error updating user preferences:', error);
      throw error;
    }
  }

  getUserPreferences(): AvatarPreferences | null {
    return this.userPreferences;
  }

  // Avatar Interaction Tracking - REMOVED (duplicate method below)

  async getAvatarInteractionHistory(conversationId: string, avatarId?: string): Promise<AvatarInteraction[]> {
    try {
      let query = supabase
        .from('avatar_interactions')
        .select('*')
        .eq('conversation_id', conversationId)
        .order('created_at', { ascending: false });

      if (avatarId) {
        query = query.eq('avatar_id', avatarId);
      }

      const { data, error } = await query;

      if (error) {
        console.error('Error fetching interaction history:', error);
        return [];
      }

      return data || [];
    } catch (error) {
      console.error('Error fetching interaction history:', error);
      return [];
    }
  }

  // Avatar Customization
  async customizeAvatarVoice(avatarId: string, voiceConfig: Partial<VoiceConfig>): Promise<void> {
    const avatar = this.avatars.get(avatarId);
    if (!avatar) {
      throw new Error(`Avatar with id ${avatarId} not found`);
    }

    const updatedAvatar: Avatar = {
      ...avatar,
      voice_config: { ...avatar.voice_config, ...voiceConfig }
    };

    this.avatars.set(avatarId, updatedAvatar);
    this.notifyListeners();

    // Save to user preferences if logged in
    if (this.userPreferences) {
      const avatarSettings = {
        ...this.userPreferences.avatar_settings,
        [avatarId]: { voice_config: voiceConfig }
      };

      await this.updateUserPreferences(this.userPreferences.user_id, { avatar_settings: avatarSettings });
    }
  }

  // Context-aware avatar switching
  switchAvatarForConversation(conversationId: string, newAvatarId: string): void {
    // Logic to switch avatar while maintaining conversation context
    // This would integrate with AIContextManager to adjust prompts
    const newAvatar = this.getAvatarById(newAvatarId);
    if (!newAvatar) {
      throw new Error(`Avatar with id ${newAvatarId} not found`);
    }

    // Notify listeners about avatar change
    this.notifyListeners();
  }

  // Multi-avatar dialogue preparation
  prepareDialogueAvatars(avatarIds: string[]): Avatar[] {
    const dialogueAvatars = avatarIds
      .map(id => this.getAvatarById(id))
      .filter(Boolean) as Avatar[];

    if (dialogueAvatars.length < 2) {
      throw new Error('At least 2 avatars are required for dialogue');
    }

    return dialogueAvatars;
  }

  /**
   * G√©n√®re une r√©ponse audio avec le vrai Google GenAI TTS selon Multi-Voice-corrective.md
   */
  async generateAvatarVoiceResponse(
    avatarId: string, 
    text: string, 
    conversationId: string
  ): Promise<{
    audioUrl: string;
    duration: number;
    avatarId: string;
  }> {
    const avatar = this.getAvatarById(avatarId);
    if (!avatar) {
      throw new Error(`Avatar non trouv√©: ${avatarId}`);
    }

    console.log(`üé§ G√©n√©ration r√©ponse vocale pour ${avatar.name} avec Google GenAI TTS`);

    try {
      const audioResponse = await googleGenAITTSServiceV2.generateAvatarSpeech({
        text,
        avatarId,
        voiceConfig: avatar.voice_config,
        conversationId
      });

      // Enregistrer l'interaction pour analytics
      await this.recordAvatarInteraction(avatarId, text, conversationId, audioResponse.audioUrl);

      // Afficher notification si fallback utilis√©
      if (audioResponse.usedFallback) {
        await notificationService.addNotification({
          type: 'system',
          category: 'system',
          title: 'Voix de secours activ√©e',
          message: 'Les quotas Google AI sont atteints. Utilisation de la voix syst√®me pour maintenir une exp√©rience fluide.',
          priority: 'medium',
          icon: 'üéµ',
          expiresAt: Date.now() + (5 * 60 * 1000) // Expire dans 5 minutes
        });
      }

      return {
        audioUrl: audioResponse.audioUrl,
        duration: audioResponse.duration,
        avatarId
      };

    } catch (error) {
      console.error(`‚ùå Erreur g√©n√©ration vocale pour ${avatarId}:`, error);
      throw new Error(`G√©n√©ration vocale √©chou√©e pour ${avatar.name}: ${error.message}`);
    }
  }

  /**
   * G√©n√®re un dialogue multi-avatars avec voix Google GenAI distinctes
   */
  async generateMultiAvatarDialogue(
    dialoguePairs: Array<{ avatarId: string; text: string; }>
  ): Promise<Array<{
    avatarId: string;
    avatarName: string;
    text: string;
    audioUrl: string;
    duration: number;
    sequence: number;
  }>> {
    console.log('üé≠ G√©n√©ration dialogue multi-avatars avec Google GenAI TTS');

    // Valider que tous les avatars existent
    for (const { avatarId } of dialoguePairs) {
      const avatar = this.getAvatarById(avatarId);
      if (!avatar) {
        throw new Error(`Avatar non trouv√© pour le dialogue: ${avatarId}`);
      }
    }

    try {
      const audioResponses = await googleGenAITTSServiceV2.generateMultiAvatarDialogue(
        dialoguePairs
      );

      // Formater les r√©ponses avec les informations d'avatar
      const dialogueResult = audioResponses.map((audioResponse, index) => {
        const avatar = this.getAvatarById(audioResponse.avatarId)!;
        const dialoguePair = dialoguePairs[index];

        return {
          avatarId: audioResponse.avatarId,
          avatarName: avatar.name,
          text: dialoguePair.text,
          audioUrl: audioResponse.audioUrl,
          duration: audioResponse.duration,
          sequence: index
        };
      });

      console.log(`‚úÖ Dialogue multi-avatars g√©n√©r√©: ${dialogueResult.length} interventions`);
      return dialogueResult;

    } catch (error) {
      console.error('‚ùå Erreur dialogue multi-avatars:', error);
      throw new Error(`G√©n√©ration dialogue multi-avatars √©chou√©e: ${error.message}`);
    }
  }

  /**
   * Test du nouveau syst√®me TTS Google GenAI
   */
  async testGoogleGenAITTS(): Promise<boolean> {
    try {
      console.log('üß™ Test du syst√®me TTS Google GenAI...');

      // Test avec l'avatar principal
      const testResponse = await this.generateAvatarVoiceResponse(
        'therapist-main',
        'Ceci est un test du nouveau syst√®me TTS avec Google GenAI et Gemini 2.5 Pro.',
        'test-conversation'
      );

      console.log('‚úÖ Test Google GenAI TTS r√©ussi:', testResponse);
      return true;

    } catch (error) {
      console.error('‚ùå Test Google GenAI TTS √©chou√©:', error);
      return false;
    }
  }

  /**
   * Enregistre une interaction avatar pour analytics
   */
  private async recordAvatarInteraction(
    avatarId: string,
    messageContent: string,
    conversationId: string,
    audioUrl?: string
  ): Promise<void> {
    try {
      const interaction: AvatarInteraction = {
        id: uuidv4(),
        conversation_id: conversationId,
        avatar_id: avatarId,
        message_content: messageContent,
        audio_url: audioUrl,
        created_at: new Date().toISOString(),
        voice_synthesis_params: this.getAvatarById(avatarId)?.voice_config || {},
        context_used: `Generated with Google GenAI TTS - Gemini 2.5 Pro`,
        user_feedback: undefined
      };

      const { error } = await supabase
        .from('avatar_interactions')
        .insert([interaction]);

      if (error) {
        console.warn('‚ö†Ô∏è Erreur enregistrement interaction avatar:', error);
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur enregistrement interaction:', error);
    }
  }

  // Analytics and insights
  getAvatarUsageStats(userId: string): Promise<Record<string, number>> {
    // Return usage statistics for each avatar
    return supabase
      .from('avatar_interactions')
      .select('avatar_id')
      .eq('user_id', userId) // This would require adding user_id to interactions table
      .then(({ data }) => {
        const stats: Record<string, number> = {};
        data?.forEach(interaction => {
          stats[interaction.avatar_id] = (stats[interaction.avatar_id] || 0) + 1;
        });
        return stats;
      });
  }

  // Accessibility features
  getAccessibilityOptions(): Record<string, any> {
    return {
      voice_speed_options: [0.5, 0.75, 1.0, 1.25, 1.5, 2.0],
      pitch_range: { min: -20, max: 20 },
      volume_range: { min: -10, max: 10 },
      pause_duration_options: [300, 500, 800, 1000, 1500]
    };
  }
}

// Export singleton instance
export const avatarManager = AvatarManager.getInstance();