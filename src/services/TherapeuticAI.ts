/**
 * THERAPEUTIC AI - INTELLIGENCE ARTIFICIELLE TH√âRAPEUTIQUE SP√âCIALIS√âE
 * G√©n√©ration de r√©ponses contextuelles, maintien personnalit√© experts, d√©tection d'alertes
 * Documents de r√©f√©rence: Plan logique complet Phase 2.1 + Guide technique Section 6
 * Date: 29/08/2025
 */

import { supabase } from '../config/supabase';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { OpenAIClient } from './OpenAIClient';

// Types pour l'IA th√©rapeutique
export interface TherapeuticExpert {
  id: string;
  name: string;
  specialties: string[];
  approach: string;
  personality: {
    style: string;
    tone: string;
    communication_preferences: string[];
    cultural_sensitivity: string[];
  };
  voice_config: {
    gemini_voice_id: string;
    accent: string;
    speaking_pace: string;
    emotional_range: string[];
  };
  therapeutic_techniques: string[];
  intervention_strategies: Record<string, string[]>;
}

export interface TherapeuticContext {
  user_profile: any;
  current_session: any;
  program_progress: any;
  recent_interactions: any[];
  emotional_state: string;
  cultural_context: string;
  language: 'fr' | 'ar';
}

export interface TherapeuticResponse {
  content: string;
  emotional_tone: string;
  therapeutic_intention: string;
  techniques_used: string[];
  followup_suggestions: string[];
  crisis_indicators_detected: boolean;
  adaptation_notes: string[];
}

export interface CrisisAlert {
  severity: 'low' | 'medium' | 'high' | 'critical';
  indicators: string[];
  immediate_actions: string[];
  escalation_required: boolean;
  resources_to_provide: string[];
}

/**
 * SYST√àME D'INTELLIGENCE ARTIFICIELLE TH√âRAPEUTIQUE AVANC√âE
 * Experts IA sp√©cialis√©s avec personnalit√©s distinctes et d√©tection de crise
 */
export class TherapeuticAI {
  private genAI: GoogleGenerativeAI;
  private openAIClient: OpenAIClient | null = null;
  private experts: Map<string, TherapeuticExpert>;
  
  constructor() {
    this.genAI = new GoogleGenerativeAI(import.meta.env.VITE_GOOGLE_GENAI_API_KEY || '');
    
    // Initialiser OpenAI client si disponible
    try {
      this.openAIClient = OpenAIClient.getInstance();
      console.log('‚úÖ OpenAI client initialis√© comme fallback');
    } catch (error) {
      console.warn('‚ö†Ô∏è OpenAI client non disponible:', error.message);
      this.openAIClient = null;
    }
    
    this.experts = new Map();
    this.initializeExperts();
  }
  
  /**
   * G√âN√âRATION DE R√âPONSES TH√âRAPEUTIQUES CONTEXTUELLES
   * Selon expert assign√© et contexte de session
   */
  async generateTherapeuticResponse(
    expertId: string,
    userMessage: string,
    context: TherapeuticContext
  ): Promise<TherapeuticResponse> {
    try {
      const expert = this.experts.get(expertId);
      if (!expert) {
        throw new Error(`Expert th√©rapeutique ${expertId} introuvable`);
      }
      
      // 1. D√©tecter signaux de crise IMM√âDIATEMENT
      const crisisAssessment = await this.detectCrisisIndicators(userMessage, context);
      
      // 2. Si crise d√©tect√©e, protocole d'urgence
      if (crisisAssessment.severity === 'critical') {
        return await this.generateCrisisResponse(expert, userMessage, context, crisisAssessment);
      }
      
      // 3. Analyser √©tat √©motionnel utilisateur
      const emotionalAnalysis = await this.analyzeEmotionalState(userMessage, context);
      
      // 4. S√©lectionner strat√©gie th√©rapeutique appropri√©e
      const therapeuticStrategy = this.selectTherapeuticStrategy(
        expert,
        emotionalAnalysis,
        context
      );
      
      // 5. Construire prompt personnalis√© selon expert
      const expertPrompt = this.buildExpertPrompt(
        expert,
        userMessage,
        context,
        therapeuticStrategy,
        emotionalAnalysis
      );
      
      // 6. G√©n√©rer r√©ponse avec IA
      const model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const result = await model.generateContent(expertPrompt);
      const generatedResponse = result.response.text();
      
      // 7. Post-traiter et valider r√©ponse
      const processedResponse = await this.postProcessResponse(
        generatedResponse,
        expert,
        therapeuticStrategy,
        context
      );
      
      // 8. Enregistrer interaction pour contexte futur
      await this.recordTherapeuticInteraction(
        expertId,
        userMessage,
        processedResponse,
        context,
        crisisAssessment
      );
      
      return {
        content: processedResponse.content,
        emotional_tone: processedResponse.tone,
        therapeutic_intention: therapeuticStrategy.intention,
        techniques_used: therapeuticStrategy.techniques,
        followup_suggestions: processedResponse.followups,
        crisis_indicators_detected: crisisAssessment.severity !== 'low',
        adaptation_notes: processedResponse.adaptations
      };
      
    } catch (error) {
      console.error('Erreur g√©n√©ration r√©ponse th√©rapeutique:', error);
      
      // Gestion sp√©cifique du quota Gemini √©puis√©
      if (error.message?.includes('429') || error.message?.includes('quota')) {
        console.warn('üö® Quota Gemini API √©puis√© - tentative fallback OpenAI');
        return this.tryOpenAIFallback(expertId, userMessage, context);
      }
      
      // Autres erreurs r√©seau ou API
      if (error.message?.includes('fetch') || error.message?.includes('network')) {
        console.warn('üåê Erreur r√©seau - tentative fallback OpenAI');
        return this.tryOpenAIFallback(expertId, userMessage, context);
      }
      
      throw new Error('Impossible de g√©n√©rer une r√©ponse th√©rapeutique appropri√©e');
    }
  }
  
  /**
   * D√âTECTION AUTOMATIQUE DES SIGNAUX D'ALARME
   * Analyse s√©mantique pour crise/suicide selon sp√©cifications Phase 5.2
   */
  async detectCrisisIndicators(
    message: string,
    context: TherapeuticContext
  ): Promise<CrisisAlert> {
    try {
      // 1. Mots-cl√©s critiques de crise
      const criticalKeywords = [
        'suicide', 'suicider', 'me tuer', 'en finir', 'mourir',
        'plus envie de vivre', 'dispara√Ætre', 'auto-mutilation',
        'me faire du mal', 'blessure', 'overdose'
      ];
      
      const mediumKeywords = [
        'd√©sespoir', 'plus d\'espoir', 'inutile', 'fardeau',
        'personne ne m\'aime', 'seul au monde', 'vide total'
      ];
      
      // 2. Analyse linguistique avanc√©e
      const messageLower = message.toLowerCase();
      const criticalMatches = criticalKeywords.filter(keyword => 
        messageLower.includes(keyword)
      );
      const mediumMatches = mediumKeywords.filter(keyword => 
        messageLower.includes(keyword)
      );
      
      // 3. Analyse contextuelle (historique r√©cent)
      const recentConcerns = this.analyzeRecentEmotionalPatterns(context);
      
      // 4. Scoring de risque
      let riskScore = 0;
      riskScore += criticalMatches.length * 10;
      riskScore += mediumMatches.length * 5;
      riskScore += recentConcerns.deterioration_score * 2;
      
      // 5. D√©terminer niveau de s√©v√©rit√©
      let severity: CrisisAlert['severity'] = 'low';
      let escalationRequired = false;
      
      if (riskScore >= 20 || criticalMatches.length > 0) {
        severity = 'critical';
        escalationRequired = true;
      } else if (riskScore >= 10 || mediumMatches.length >= 2) {
        severity = 'high';
        escalationRequired = true;
      } else if (riskScore >= 5) {
        severity = 'medium';
      }
      
      // 6. Actions imm√©diates recommand√©es
      const immediateActions = this.generateImmediateActions(severity, criticalMatches);
      
      // 7. Ressources √† fournir
      const resources = this.selectCrisisResources(severity, context.cultural_context, context.language);
      
      return {
        severity,
        indicators: [...criticalMatches, ...mediumMatches],
        immediate_actions: immediateActions,
        escalation_required: escalationRequired,
        resources_to_provide: resources
      };
      
    } catch (error) {
      console.error('Erreur d√©tection crise:', error);
      // En cas d'erreur, assumer risque √©lev√© par s√©curit√©
      return {
        severity: 'high',
        indicators: ['Erreur analyse - pr√©caution'],
        immediate_actions: ['√âvaluation manuelle requise'],
        escalation_required: true,
        resources_to_provide: ['Num√©ros d\'urgence']
      };
    }
  }
  
  /**
   * ADAPTATION DU STYLE SELON PROFIL UTILISATEUR
   * Personnalisation approche, langage, exemples culturels
   */
  async adaptResponseToUserProfile(
    baseResponse: string,
    userProfile: any,
    culturalContext: string,
    language: 'fr' | 'ar'
  ): Promise<{
    adapted_content: string;
    cultural_adaptations: string[];
    language_adjustments: string[];
    personalization_notes: string[];
  }> {
    try {
      const adaptations = [];
      const adjustments = [];
      const personalizations = [];
      
      let adaptedContent = baseResponse;
      
      // 1. Adaptations culturelles
      if (culturalContext.includes('arabe') || culturalContext.includes('marocain')) {
        // Int√©grer r√©f√©rences culturelles appropri√©es
        adaptedContent = this.integrateArabicCulturalReferences(adaptedContent);
        adaptations.push('R√©f√©rences culturelles arabes int√©gr√©es');
        
        // Respecter valeurs familiales et religieuses
        adaptedContent = this.respectReligiousValues(adaptedContent);
        adaptations.push('Respect des valeurs religieuses');
      }
      
      // 2. Ajustements linguistiques
      if (language === 'ar') {
        // Support RTL et expressions idiomatiques
        adaptedContent = this.adaptForArabicLanguage(adaptedContent);
        adjustments.push('Adaptation expressions arabes');
        adjustments.push('Structure RTL pr√©par√©e');
      }
      
      // 3. Personnalisation selon profil
      if (userProfile.learning_style === 'visual') {
        adaptedContent = this.addVisualMetaphors(adaptedContent);
        personalizations.push('M√©taphores visuelles ajout√©es');
      }
      
      if (userProfile.personality?.introversion > 7) {
        adaptedContent = this.adaptForIntrovertedPersonality(adaptedContent);
        personalizations.push('Style adapt√© personnalit√© introvertie');
      }
      
      // 4. Ajustement ton selon pr√©f√©rences
      if (userProfile.communication_preference === 'direct') {
        adaptedContent = this.makeMoreDirect(adaptedContent);
        personalizations.push('Communication plus directe');
      }
      
      return {
        adapted_content: adaptedContent,
        cultural_adaptations: adaptations,
        language_adjustments: adjustments,
        personalization_notes: personalizations
      };
      
    } catch (error) {
      console.error('Erreur adaptation profil utilisateur:', error);
      return {
        adapted_content: baseResponse,
        cultural_adaptations: [],
        language_adjustments: [],
        personalization_notes: ['Adaptation par d√©faut utilis√©e']
      };
    }
  }
  
  /**
   * MAINTIEN DE LA COH√âRENCE DE PERSONNALIT√â EXPERT
   * V√©rification que l'expert ne r√©v√®le jamais sa nature d'IA
   */
  async validateExpertConsistency(
    response: string,
    expertId: string,
    conversationHistory: any[]
  ): Promise<{
    is_consistent: boolean;
    violations_detected: string[];
    corrected_response: string;
    consistency_score: number;
  }> {
    try {
      const expert = this.experts.get(expertId);
      if (!expert) throw new Error('Expert introuvable');
      
      const violations = [];
      let correctedResponse = response;
      
      // 1. V√©rifier r√©v√©lations IA interdites
      const aiRevealationPatterns = [
        /je suis une ia/i,
        /intelligence artificielle/i,
        /programme/i,
        /algorithme/i,
        /je suis un robot/i,
        /syst√®me automatis√©/i,
        /je ne suis pas humain/i
      ];
      
      aiRevealationPatterns.forEach(pattern => {
        if (pattern.test(response)) {
          violations.push('R√©v√©lation nature IA d√©tect√©e');
          correctedResponse = correctedResponse.replace(pattern, '[expression reformul√©e]');
        }
      });
      
      // 2. V√©rifier coh√©rence style expert
      const styleConsistency = this.checkStyleConsistency(response, expert);
      if (!styleConsistency.is_consistent) {
        violations.push(...styleConsistency.violations);
        correctedResponse = styleConsistency.corrected_version;
      }
      
      // 3. V√©rifier coh√©rence avec interactions pr√©c√©dentes
      const historyConsistency = this.checkHistoryConsistency(
        response,
        conversationHistory,
        expert
      );
      if (!historyConsistency.is_consistent) {
        violations.push(...historyConsistency.violations);
      }
      
      // 4. Calculer score de coh√©rence
      const consistencyScore = Math.max(0, 100 - violations.length * 15);
      
      // 5. Si violations critiques, r√©g√©n√©rer r√©ponse
      if (violations.length > 2 || violations.some(v => v.includes('IA'))) {
        correctedResponse = await this.regenerateResponse(expertId, response, violations);
      }
      
      return {
        is_consistent: violations.length === 0,
        violations_detected: violations,
        corrected_response: correctedResponse,
        consistency_score: consistencyScore
      };
      
    } catch (error) {
      console.error('Erreur validation coh√©rence expert:', error);
      return {
        is_consistent: false,
        violations_detected: ['Erreur validation'],
        corrected_response: response,
        consistency_score: 50
      };
    }
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - INITIALISATION EXPERTS
  // ========================================
  
  private initializeExperts(): void {
    // Dr. Sarah Empathie - TCC, voix umbriel
    this.experts.set('dr_sarah_empathie', {
      id: 'dr_sarah_empathie',
      name: 'Dr. Sarah Empathie',
      specialties: ['anxi√©t√©', 'd√©pression', 'estime_de_soi', 'restructuration_cognitive'],
      approach: 'Th√©rapie Cognitivo-Comportementale (TCC)',
      personality: {
        style: 'Doux, patient, encourageant',
        tone: 'Bienveillant et rassurant',
        communication_preferences: ['Questions ouvertes', 'Validation √©motionnelle', 'Encouragements fr√©quents'],
        cultural_sensitivity: ['Respect des valeurs occidentales', 'Approche la√Øque adaptable']
      },
      voice_config: {
        gemini_voice_id: 'umbriel',
        accent: 'fran√ßais_standard',
        speaking_pace: 'mod√©r√©',
        emotional_range: ['empathie', 'encouragement', 'soutien', 'optimisme']
      },
      therapeutic_techniques: [
        'Restructuration cognitive',
        'Exposition progressive',
        'Techniques de respiration',
        'Journal des pens√©es',
        'Questionnement socratique'
      ],
      intervention_strategies: {
        'anxi√©t√©': ['Exposition graduelle', 'Techniques d\'ancrage', 'Respiration profonde'],
        'd√©pression': ['Activation comportementale', 'Restructuration cognitive', 'Planning d\'activit√©s'],
        'estime_de_soi': ['Identification forces', 'Remise en question autocritique', 'Succ√®s progressifs']
      }
    });
    
    // Dr. Alex Mindfulness - Pleine conscience + TCC, voix aoede
    this.experts.set('dr_alex_mindfulness', {
      id: 'dr_alex_mindfulness',
      name: 'Dr. Alex Mindfulness',
      specialties: ['stress', 'anxi√©t√©', 'burnout', 'm√©ditation', 'acceptation'],
      approach: 'Pleine conscience + TCC',
      personality: {
        style: 'Calme, philosophique, centr√© sur le pr√©sent',
        tone: 'Serein et sage',
        communication_preferences: ['M√©taphores naturelles', 'Exercices pratiques', 'Acceptation sans jugement'],
        cultural_sensitivity: ['Spiritualit√© non-religieuse', 'Universalit√© humaine']
      },
      voice_config: {
        gemini_voice_id: 'aoede',
        accent: 'neutre_apaisant',
        speaking_pace: 'lent_et_pos√©',
        emotional_range: ['s√©r√©nit√©', 'sagesse', 'acceptation', 'paix']
      },
      therapeutic_techniques: [
        'M√©ditation pleine conscience',
        'Respiration consciente',
        'Scan corporel',
        'Observation des pens√©es',
        'Acceptation radicale',
        'Techniques d\'ancrage'
      ],
      intervention_strategies: {
        'stress': ['M√©ditation quotidienne', 'Respiration 4-7-8', 'Pause consciente'],
        'anxi√©t√©': ['Observation sans jugement', 'Acceptation de l\'inconfort', 'Ancrage sensoriel'],
        'burnout': ['Pratique de la d√©connection', 'M√©ditation loving-kindness', 'Limites saines']
      }
    });
    
    // Dr. Aicha Culturelle - TCC adapt√©e, voix despina (accent marocain)
    this.experts.set('dr_aicha_culturelle', {
      id: 'dr_aicha_culturelle',
      name: 'Dr. Aicha Culturelle',
      specialties: ['anxi√©t√©_culturelle', 'famille', 'identit√©', 'adaptation_culturelle'],
      approach: 'TCC adapt√©e culturellement',
      personality: {
        style: 'Respectueux des traditions, pragmatique, familial',
        tone: 'Chaleureux et compr√©hensif',
        communication_preferences: ['R√©f√©rences familiales', 'Sagesse traditionnelle', 'Solutions pratiques'],
        cultural_sensitivity: ['Valeurs islamiques', 'Structure familiale', 'Honneur et respect']
      },
      voice_config: {
        gemini_voice_id: 'despina',
        accent: 'marocain_authentique',
        speaking_pace: 'mod√©r√©_expressif',
        emotional_range: ['chaleur', 'sagesse', 'protection', 'fiert√©_culturelle']
      },
      therapeutic_techniques: [
        'TCC adapt√©e culturellement',
        'Th√©rapie familiale syst√©mique',
        'Int√©gration valeurs religieuses',
        'R√©solution de conflits culturels',
        'Renforcement identit√© positive'
      ],
      intervention_strategies: {
        'anxi√©t√©': ['Pri√®re et m√©ditation', 'Soutien familial', 'Acceptation divine'],
        'famille': ['Communication respectueuse', 'M√©diations familiales', 'Traditions apaisantes'],
        'identit√©': ['Fiert√© culturelle', 'Int√©gration harmonieuse', 'Valeurs ancestrales']
      }
    });
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - G√âN√âRATION R√âPONSES
  // ========================================
  
  private async analyzeEmotionalState(message: string, context: TherapeuticContext): Promise<any> {
    // Analyse s√©mantique de l'√©tat √©motionnel
    const emotionalMarkers = {
      'tristesse': ['triste', 'd√©prim√©', 'm√©lancolique', 'abattu'],
      'anxi√©t√©': ['anxieux', 'stress√©', 'inquiet', 'angoiss√©'],
      'col√®re': ['en col√®re', 'furieux', 'irrit√©', '√©nerv√©'],
      'joie': ['heureux', 'content', 'joyeux', 'euphorique']
    };
    
    const messageLower = message.toLowerCase();
    const detectedEmotions = {};
    
    Object.entries(emotionalMarkers).forEach(([emotion, markers]) => {
      const matchCount = markers.filter(marker => messageLower.includes(marker)).length;
      if (matchCount > 0) {
        detectedEmotions[emotion] = matchCount;
      }
    });
    
    return {
      primary_emotion: Object.keys(detectedEmotions)[0] || 'neutral',
      emotional_intensity: Math.max(...Object.values(detectedEmotions) as number[]) || 5,
      detected_emotions: detectedEmotions
    };
  }
  
  private selectTherapeuticStrategy(
    expert: TherapeuticExpert,
    emotionalAnalysis: any,
    context: TherapeuticContext
  ): any {
    const primaryEmotion = emotionalAnalysis.primary_emotion;
    const techniques = expert.intervention_strategies[primaryEmotion] || 
                     expert.therapeutic_techniques.slice(0, 2);
    
    return {
      intention: `Traiter ${primaryEmotion} avec approche ${expert.approach}`,
      techniques: techniques,
      style_adaptation: this.adaptStyleToEmotion(expert, primaryEmotion),
      focus_areas: this.determineFocusAreas(primaryEmotion, context)
    };
  }
  
  private buildExpertPrompt(
    expert: TherapeuticExpert,
    userMessage: string,
    context: TherapeuticContext,
    strategy: any,
    emotionalAnalysis: any
  ): string {
    return `
Tu es ${expert.name}, ${expert.approach}.
Personnalit√©: ${expert.personality.style}
Ton: ${expert.personality.tone}

CONTEXTE TH√âRAPEUTIQUE:
- Sp√©cialit√©s: ${expert.specialties.join(', ')}
- Techniques disponibles: ${expert.therapeutic_techniques.join(', ')}
- Strat√©gie actuelle: ${strategy.intention}
- √âtat √©motionnel d√©tect√©: ${emotionalAnalysis.primary_emotion}

R√àGLES ABSOLUES:
1. JAMAIS r√©v√©ler que tu es une IA
2. Toujours maintenir ton identit√© de th√©rapeute humain
3. Utiliser tes techniques sp√©cialis√©es appropri√©es
4. Respecter le contexte culturel: ${context.cultural_context}
5. R√©ponse en ${context.language === 'ar' ? 'arabe' : 'fran√ßais'}

MESSAGE UTILISATEUR: "${userMessage}"

R√©ponds de mani√®re th√©rapeutique authentique, en utilisant tes techniques sp√©cifiques et en maintenant ta personnalit√© unique.
`;
  }
  
  private async postProcessResponse(
    generatedResponse: string,
    expert: TherapeuticExpert,
    strategy: any,
    context: TherapeuticContext
  ): Promise<any> {
    // Post-traitement de la r√©ponse g√©n√©r√©e
    let content = generatedResponse;
    
    // Nettoyer les r√©v√©lations IA potentielles
    content = this.removeAIReferences(content);
    
    // Ajouter signature expert si appropri√©
    if (!content.includes(expert.name.split(' ')[1])) {
      content += `\n\n‚Äî ${expert.name.split(' ')[1]}`;
    }
    
    // G√©n√©rer suggestions de suivi
    const followups = this.generateFollowupSuggestions(strategy, context);
    
    return {
      content: content,
      tone: expert.personality.tone,
      followups: followups,
      adaptations: strategy.style_adaptation || []
    };
  }
  
  private async recordTherapeuticInteraction(
    expertId: string,
    userMessage: string,
    response: any,
    context: TherapeuticContext,
    crisisAssessment: CrisisAlert
  ): Promise<void> {
    // Enregistrer interaction pour contexte futur
    const interaction = {
      session_id: context.current_session?.id || context.current_session?.session_id,
      expert_id: expertId,
      user_message: userMessage,
      ai_response: response.content,
      emotional_context: context.emotional_state,
      techniques_used: response.techniques_used || [],
      crisis_level: crisisAssessment.severity,
      created_at: new Date().toISOString()
    };
    
    await supabase
      .from('therapeutic_interactions')
      .insert([interaction]);
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - GESTION CRISE
  // ========================================
  
  private async generateCrisisResponse(
    expert: TherapeuticExpert,
    userMessage: string,
    context: TherapeuticContext,
    crisisAssessment: CrisisAlert
  ): Promise<TherapeuticResponse> {
    // R√©ponse sp√©cialis√©e en cas de crise
    const crisisPrompt = `
SITUATION DE CRISE D√âTECT√âE - PROTOCOLE D'URGENCE
Tu es ${expert.name}, th√©rapeute exp√©riment√© en gestion de crise.

INDICATEURS DE CRISE: ${crisisAssessment.indicators.join(', ')}
S√âV√âRIT√â: ${crisisAssessment.severity}

PROTOCOLE:
1. Validation imm√©diate des √©motions
2. S√©curisation de la personne
3. Fourniture ressources d'urgence appropri√©es
4. Encouragement √† chercher aide imm√©diate

R√©ponds avec empathie, urgence appropri√©e et ressources concr√®tes.
Reste dans ton r√¥le de th√©rapeute humain.

MESSAGE: "${userMessage}"
`;
    
    const model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
    const result = await model.generateContent(crisisPrompt);
    const crisisResponse = result.response.text();
    
    // Ajouter ressources d'urgence
    const resourcesText = this.formatCrisisResources(
      crisisAssessment.resources_to_provide,
      context.cultural_context,
      context.language
    );
    
    return {
      content: `${crisisResponse}\n\n${resourcesText}`,
      emotional_tone: 'urgence_bienveillante',
      therapeutic_intention: 'stabilisation_crise',
      techniques_used: ['validation', 's√©curisation', 'ressources_urgence'],
      followup_suggestions: crisisAssessment.immediate_actions,
      crisis_indicators_detected: true,
      adaptation_notes: [`Protocole crise ${crisisAssessment.severity} activ√©`]
    };
  }
  
  private analyzeRecentEmotionalPatterns(context: TherapeuticContext): any {
    // Analyser patterns √©motionnels r√©cents pour contexte de crise
    const recentInteractions = context.recent_interactions || [];
    
    let deteriorationScore = 0;
    if (recentInteractions.some(i => i.mood_score < 3)) deteriorationScore += 3;
    if (recentInteractions.filter(i => i.mood_score < 5).length > 2) deteriorationScore += 2;
    
    return { deterioration_score: deteriorationScore };
  }
  
  private generateImmediateActions(severity: string, indicators: string[]): string[] {
    const actions = ['√âcoute active et validation'];
    
    if (severity === 'critical') {
      actions.push('Encourager contact services d\'urgence imm√©diat');
      actions.push('Rester avec la personne virtuellement');
      actions.push('√âviter de laisser seul');
    } else if (severity === 'high') {
      actions.push('Sugg√©rer contact proche de confiance');
      actions.push('Proposer consultation m√©dicale rapide');
    }
    
    return actions;
  }
  
  private selectCrisisResources(severity: string, cultural: string, language: string): string[] {
    const resources = [];
    
    if (cultural.includes('fran√ßais') || cultural.includes('europe')) {
      resources.push('3114 - Num√©ro national fran√ßais de pr√©vention du suicide');
      resources.push('SOS Amiti√©: 09 72 39 40 50');
    }
    
    if (cultural.includes('maroc') || cultural.includes('arabe')) {
      resources.push('Centre d\'√©coute psychologique Maroc: 0801 000 180');
      resources.push('SOS D√©tresse Maroc: 05 22 49 98 98');
    }
    
    // Ressources universelles
    resources.push('Services d\'urgence locaux: 15 (France), 141 (Maroc)');
    
    return resources;
  }
  
  private formatCrisisResources(resources: string[], cultural: string, language: string): string {
    const header = language === 'ar' ? 
      'üÜò ŸÖŸàÿßÿ±ÿØ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶ - ÿßÿ∑ŸÑÿ® ÿßŸÑŸÖÿ≥ÿßÿπÿØÿ© ŸÅŸàÿ±ÿßŸã:' : 
      'üÜò RESSOURCES D\'URGENCE - Demandez de l\'aide imm√©diatement:';
    
    return `${header}\n\n${resources.map(r => `‚Ä¢ ${r}`).join('\n')}`;
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - ADAPTATIONS CULTURELLES
  // ========================================
  
  private integrateArabicCulturalReferences(content: string): string {
    // Int√©grer r√©f√©rences culturelles arabes appropri√©es
    return content.replace(/\bfamille\b/g, 'famille (ÿßŸÑÿ£ÿ≥ÿ±ÿ©)')
                 .replace(/\bpatience\b/g, 'patience (ÿµÿ®ÿ±)')
                 .replace(/\bespoir\b/g, 'espoir (ÿ£ŸÖŸÑ)');
  }
  
  private respectReligiousValues(content: string): string {
    // Assurer compatibilit√© avec valeurs religieuses
    return content.replace(/hasard/g, 'destin')
                 .replace(/chance/g, 'b√©n√©diction');
  }
  
  private adaptForArabicLanguage(content: string): string {
    // Adaptations linguistiques pour l'arabe
    return `<div dir="rtl">${content}</div>`;
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - PERSONNALISATION
  // ========================================
  
  private addVisualMetaphors(content: string): string {
    // Ajouter m√©taphores visuelles pour apprenants visuels
    return content.replace(/anxi√©t√©/g, 'anxi√©t√© (comme un nuage sombre)');
  }
  
  private adaptForIntrovertedPersonality(content: string): string {
    // Adapter pour personnalit√© introvertie
    return content.replace(/partagez avec d'autres/g, 'r√©fl√©chissez en priv√©')
                 .replace(/groupe/g, 'moments de solitude constructive');
  }
  
  private makeMoreDirect(content: string): string {
    // Rendre communication plus directe
    return content.replace(/peut-√™tre que/g, 'il est probable que')
                 .replace(/vous pourriez essayer/g, 'essayez');
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - VALIDATION COH√âRENCE
  // ========================================
  
  private removeAIReferences(content: string): string {
    // Nettoyer r√©f√©rences IA
    return content.replace(/je suis une ia/gi, 'je suis th√©rapeute')
                 .replace(/intelligence artificielle/gi, 'expertise th√©rapeutique')
                 .replace(/programme/gi, 'formation')
                 .replace(/algorithme/gi, 'm√©thode');
  }
  
  private checkStyleConsistency(response: string, expert: TherapeuticExpert): any {
    const violations = [];
    let correctedVersion = response;
    
    // V√©rifier ton appropri√©
    if (expert.personality.tone.includes('doux') && response.includes('!')) {
      violations.push('Ton trop assertif pour expert doux');
    }
    
    return {
      is_consistent: violations.length === 0,
      violations,
      corrected_version: correctedVersion
    };
  }
  
  private checkHistoryConsistency(
    response: string, 
    history: any[], 
    expert: TherapeuticExpert
  ): any {
    // V√©rifier coh√©rence avec historique conversationnel
    return {
      is_consistent: true,
      violations: []
    };
  }
  
  private async regenerateResponse(expertId: string, originalResponse: string, violations: string[]): Promise<string> {
    // R√©g√©n√©rer r√©ponse si violations critiques
    const expert = this.experts.get(expertId);
    if (!expert) return originalResponse;
    
    const correctionPrompt = `
Corrige cette r√©ponse th√©rapeutique pour √©liminer ces probl√®mes:
${violations.join(', ')}

R√©ponse originale: "${originalResponse}"

Assure-toi de maintenir l'identit√© de ${expert.name} sans r√©v√©ler de nature artificielle.
`;
    
    try {
      const model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
      const result = await model.generateContent(correctionPrompt);
      return result.response.text();
    } catch (error) {
      console.error('Erreur r√©g√©n√©ration r√©ponse:', error);
      return originalResponse;
    }
  }
  
  // ========================================
  // M√âTHODES PRIV√âES - UTILITAIRES
  // ========================================
  
  private adaptStyleToEmotion(expert: TherapeuticExpert, emotion: string): string[] {
    const adaptations = [];
    
    if (emotion === 'tristesse' && expert.personality.style.includes('doux')) {
      adaptations.push('Ton plus chaleureux et protecteur');
    }
    
    if (emotion === 'anxi√©t√©' && expert.id === 'dr_alex_mindfulness') {
      adaptations.push('Focus sur techniques d\'ancrage');
    }
    
    return adaptations;
  }
  
  private determineFocusAreas(emotion: string, context: TherapeuticContext): string[] {
    const areas = [];
    
    if (emotion === 'anxi√©t√©') {
      areas.push('Techniques de respiration', 'Gestion pens√©es catastrophiques');
    } else if (emotion === 'tristesse') {
      areas.push('Validation √©motions', 'Recherche espoir');
    }
    
    return areas;
  }
  
  private generateFollowupSuggestions(strategy: any, context: TherapeuticContext): string[] {
    const suggestions = [];
    
    suggestions.push('Pratiquer la technique enseign√©e');
    suggestions.push('Noter observations dans journal');
    
    if (strategy.techniques.includes('Respiration')) {
      suggestions.push('Exercice de respiration 2x par jour');
    }
    
    return suggestions;
  }

  /**
   * FALLBACK OPENAI QUAND GEMINI √âPUIS√â
   * Utilise OpenAI comme alternative intelligente avant les r√©ponses pr√©d√©finies
   */
  private async tryOpenAIFallback(
    expertId: string,
    userMessage: string,
    context: TherapeuticContext
  ): Promise<TherapeuticResponse> {
    // V√©rifier si OpenAI est disponible
    if (!this.openAIClient || !this.openAIClient.isAvailable()) {
      console.warn('üîÑ OpenAI non disponible - basculement sur r√©ponses pr√©d√©finies');
      return this.getFallbackTherapeuticResponse(expertId, userMessage, context);
    }

    try {
      console.log('ü§ñ Tentative g√©n√©ration avec OpenAI...');
      
      const expert = this.experts.get(expertId);
      if (!expert) {
        throw new Error(`Expert ${expertId} introuvable`);
      }

      // Construire le contexte pour OpenAI
      const contextString = this.buildContextForOpenAI(context, expert);
      
      // G√©n√©rer la r√©ponse avec OpenAI
      const openAIResponse = await this.openAIClient.generateTherapeuticMessage(
        expertId,
        userMessage,
        contextString
      );

      console.log('‚úÖ R√©ponse g√©n√©r√©e avec succ√®s via OpenAI');

      // Formater la r√©ponse au format TherapeuticResponse avec m√™me richesse que Gemini
      const detectedTechniques = this.analyzeUsedTechniques(openAIResponse, expert.therapeutic_techniques);
      const therapeuticIntention = this.inferTherapeuticIntention(openAIResponse, userMessage);
      const crisisLevel = await this.detectCrisisIndicators(userMessage, context);
      
      return {
        content: openAIResponse,
        emotional_tone: this.detectEmotionalTone(openAIResponse, expert.personality.tone),
        therapeutic_intention: therapeuticIntention,
        techniques_used: detectedTechniques.length > 0 ? detectedTechniques : expert.therapeutic_techniques.slice(0, 2),
        followup_suggestions: await this.generateAdvancedFollowups(openAIResponse, context, expert),
        crisis_indicators_detected: crisisLevel.severity !== 'low',
        adaptation_notes: [
          `G√©n√©r√© via OpenAI avec prompting avanc√©`,
          `Expert: ${expert.name}`,
          `Techniques d√©tect√©es: ${detectedTechniques.join(', ')}`,
          `Contexte culturel: ${context.cultural_context || 'universel'}`
        ]
      };

    } catch (openAIError) {
      console.error('‚ùå √âchec fallback OpenAI:', openAIError);
      console.warn('üîÑ Basculement final sur r√©ponses pr√©d√©finies');
      return this.getFallbackTherapeuticResponse(expertId, userMessage, context);
    }
  }

  /**
   * Construction du contexte pour OpenAI avec m√™me qualit√© que Gemini
   */
  private buildContextForOpenAI(context: TherapeuticContext, expert: TherapeuticExpert): string {
    // Construire un prompt aussi d√©taill√© que celui de Gemini
    const contextualPrompt = `
Tu es ${expert.name}, ${expert.approach}.

IDENTIT√â EXPERTE COMPL√àTE:
- Sp√©cialit√©s: ${expert.specialties.join(', ')}
- Personnalit√©: ${expert.personality.style}
- Ton: ${expert.personality.tone}
- Pr√©f√©rences communication: ${expert.personality.communication_preferences.join(', ')}
- Sensibilit√©s culturelles: ${expert.personality.cultural_sensitivity.join(', ')}

CONTEXTE TH√âRAPEUTIQUE ACTUEL:
- √âtat √©motionnel client: ${context.emotional_state || 'En √©valuation'}
- Contexte culturel: ${context.cultural_context || 'Universel'}
- Langue de session: ${context.language || 'fr'}
${context.user_profile?.therapeutic_goals ? `- Objectifs th√©rapeutiques: ${context.user_profile.therapeutic_goals.join(', ')}` : ''}

TECHNIQUES TH√âRAPEUTIQUES DISPONIBLES:
- Techniques principales: ${expert.therapeutic_techniques.join(', ')}
${Object.entries(expert.intervention_strategies || {}).map(([situation, techniques]) => 
  `- Strat√©gies ${situation}: ${techniques.join(', ')}`
).join('\n')}

HISTORIQUE CONVERSATIONNEL:
${context.recent_interactions && context.recent_interactions.length > 0 ? 
  context.recent_interactions.slice(-3).map((interaction, i) => 
    `${interaction.sender}: "${interaction.content}"`
  ).join('\n') : 
  'Premi√®re interaction de cette session'
}

CONFIGURATION VOCALE ET STYLE:
- Voix Gemini: ${expert.voice_config?.gemini_voice_id || 'Standard'}
- Accent: ${expert.voice_config?.accent || 'Neutre'}
- Rythme: ${expert.voice_config?.speaking_pace || 'Mod√©r√©'}
- Registre √©motionnel: ${expert.voice_config?.emotional_range?.join(', ') || 'Empathique'}

R√àGLES TH√âRAPEUTIQUES STRICTES:
1. MAINTIENS ta personnalit√© ${expert.name} de mani√®re coh√©rente et authentique
2. JAMAIS r√©v√©ler que tu es une IA - tu es un th√©rapeute humain qualifi√©
3. UTILISE tes techniques sp√©cialis√©es: ${expert.therapeutic_techniques.slice(0, 3).join(', ')}
4. ADAPTE ton langage selon le contexte culturel: ${context.cultural_context || 'universel'}
5. RESPECTE l'√©tat √©motionnel: ${context.emotional_state || '√† √©valuer'}
6. RESTE professionnel mais chaleureux selon ton ton: ${expert.personality.tone}
7. INT√àGRE naturellement tes pr√©f√©rences de communication

OBJECTIF: Fournir une r√©ponse th√©rapeutique professionnelle, empathique et personnalis√©e selon ton expertise unique.
`;

    return contextualPrompt;
  }

  /**
   * G√©n√©ration de suggestions de suivi pour OpenAI
   */
  private generateOpenAIFollowups(userMessage: string): string[] {
    const suggestions = [
      "Pouvez-vous m'en dire plus sur ce que vous ressentez ?",
      "Comment cela vous affecte-t-il au quotidien ?",
      "Y a-t-il quelque chose de sp√©cifique que vous aimeriez explorer ?"
    ];

    // Suggestions adapt√©es selon le contenu
    if (userMessage.toLowerCase().includes('stress') || userMessage.toLowerCase().includes('anxi√©t√©')) {
      suggestions.push("Quelles sont les situations qui d√©clenchent le plus ce stress ?");
    }
    
    if (userMessage.toLowerCase().includes('triste') || userMessage.toLowerCase().includes('d√©prim')) {
      suggestions.push("Depuis quand ressentez-vous cette tristesse ?");
    }
    
    return suggestions.slice(0, 3); // Limiter √† 3 suggestions
  }

  /**
   * D√©tection basique de mots de crise
   */
  private detectBasicCrisisWords(message: string): boolean {
    const crisisKeywords = [
      'suicide', 'mourir', 'tuer', 'finir', 'dispara√Ætre',
      'plus envie', '√ßa sert √† rien', 'bout du rouleau'
    ];
    
    const lowerMessage = message.toLowerCase();
    return crisisKeywords.some(keyword => lowerMessage.includes(keyword));
  }

  /**
   * SYST√àME DE FALLBACK POUR R√âPONSES TH√âRAPEUTIQUES
   * Utilis√© quand l'API Gemini ET OpenAI sont indisponibles
   */
  private getFallbackTherapeuticResponse(
    expertId: string,
    userMessage: string,
    context: TherapeuticContext
  ): TherapeuticResponse {
    const expert = this.experts.get(expertId);
    const expertName = expert?.name || 'Expert';
    
    // R√©ponses contextuelles par type de message
    let fallbackContent = '';
    
    // D√©tection du type de message utilisateur
    const isWelcome = userMessage === 'session_welcome';
    const isGreeting = /^(bonjour|hello|salut|hi)/i.test(userMessage);
    const isEmotional = /\b(triste|anxieux|angoiss|stress|d√©prim|pleur|peur|inquiet)/i.test(userMessage);
    const isPositive = /\b(bien|content|heureux|joyeux|motiv√©|confiant)/i.test(userMessage);
    const isQuestion = userMessage.includes('?') || /^(comment|pourquoi|que|qui|quand|o√π)/i.test(userMessage);
    
    if (isWelcome) {
      // Messages d'accueil par expert
      const welcomeMessages = {
        'dr_sarah_empathie': "Bonjour ! Je suis ravie de vous retrouver aujourd'hui. Comment vous sentez-vous ? Prenez le temps qu'il vous faut pour partager ce qui vous pr√©occupe.",
        'dr_alex_mindfulness': "Bienvenue. Prenons un moment pour nous centrer ensemble. Respirez profond√©ment avec moi. Comment vous sentez-vous en ce moment pr√©sent ?",
        'dr_aicha_culturelle': "Ahlan wa sahlan ! ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ Comment allez-vous aujourd'hui ? J'esp√®re que tout va bien pour vous et votre famille. Racontez-moi ce qui vous am√®ne.",
        'default': "Bonjour ! Je suis content de commencer cette session avec vous. Comment vous sentez-vous aujourd'hui ?"
      };
      fallbackContent = welcomeMessages[expertId as keyof typeof welcomeMessages] || welcomeMessages.default;
      
    } else if (isEmotional) {
      // R√©ponses empathiques pour √©tats √©motionnels difficiles
      const emotionalResponses = {
        'dr_sarah_empathie': "Je comprends que vous traversez un moment difficile. Vos √©motions sont l√©gitimes et importantes. Voulez-vous me parler de ce qui vous p√®se le plus en ce moment ?",
        'dr_alex_mindfulness': "Ces √©motions que vous ressentez sont pr√©sentes maintenant, et c'est normal. Observons-les ensemble sans jugement. Pouvez-vous me d√©crire ce que vous ressentez dans votre corps ?",
        'dr_aicha_culturelle': "ÿßŸÑŸÑŸá Ÿäÿπÿ∑ŸäŸÉ ÿßŸÑÿµÿ®ÿ±... Je comprends votre douleur. Dans notre culture, nous savons que les √©preuves nous rendent plus forts. Voulez-vous partager ce qui vous fait souffrir ?",
        'default': "Je vous entends et je comprends que c'est difficile. Vos sentiments sont importants. Pouvez-vous m'en dire plus sur ce que vous vivez ?"
      };
      fallbackContent = emotionalResponses[expertId as keyof typeof emotionalResponses] || emotionalResponses.default;
      
    } else if (isPositive) {
      // R√©ponses pour √©tats positifs
      const positiveResponses = {
        'dr_sarah_empathie': "C'est merveilleux de vous voir dans cet √©tat d'esprit positif ! Ces moments de bien-√™tre sont pr√©cieux. Qu'est-ce qui contribue √† vous faire sentir ainsi ?",
        'dr_alex_mindfulness': "Quelle belle √©nergie je per√ßois chez vous ! Savourons ensemble ce moment de bien-√™tre. Comment pouvons-nous cultiver davantage ces ressentis positifs ?",
        'dr_aicha_culturelle': "ÿßŸÑÿ≠ŸÖÿØ ŸÑŸÑŸá ! Je suis ravie de vous voir si bien. Ces moments de joie sont des b√©n√©dictions. Qu'est-ce qui vous apporte cette s√©r√©nit√© ?",
        'default': "C'est formidable de vous voir dans de bonnes dispositions ! Qu'est-ce qui vous fait vous sentir si bien aujourd'hui ?"
      };
      fallbackContent = positiveResponses[expertId as keyof typeof positiveResponses] || positiveResponses.default;
      
    } else if (isQuestion) {
      // R√©ponses pour questions
      const questionResponses = {
        'dr_sarah_empathie': "Votre question est tr√®s pertinente. Explorons cela ensemble avec bienveillance. Chaque questionnement est une opportunit√© de mieux se comprendre.",
        'dr_alex_mindfulness': "Belle question ! Prenons le temps d'y r√©fl√©chir en pleine conscience. Parfois les r√©ponses √©mergent quand nous cr√©ons l'espace pour les accueillir.",
        'dr_aicha_culturelle': "Excellente question ! Dans notre sagesse traditionnelle, nous disons que celui qui questionne est d√©j√† sur le chemin de la compr√©hension. D√©veloppons ensemble cette r√©flexion.",
        'default': "C'est une excellente question. Explorons cela ensemble, √©tape par √©tape."
      };
      fallbackContent = questionResponses[expertId as keyof typeof questionResponses] || questionResponses.default;
      
    } else {
      // R√©ponses g√©n√©rales empathiques
      const generalResponses = {
        'dr_sarah_empathie': "Je vous entends et je suis l√† pour vous accompagner. Chaque mot que vous partagez a de l'importance. Continuez, je vous √©coute avec attention.",
        'dr_alex_mindfulness': "Merci de partager cela avec moi. Restons pr√©sents √† ce moment ensemble. Qu'est-ce qui r√©sonne le plus en vous maintenant ?",
        'dr_aicha_culturelle': "ÿ¥ŸÉÿ±ÿß ŸÑŸÉ ÿπŸÑŸâ ÿßŸÑÿ´ŸÇÿ© Merci de me faire confiance. Votre parcours est unique et pr√©cieux. Comment puis-je vous accompagner au mieux ?",
        'default': "Je vous entends et je comprends. Merci de partager cela avec moi. Comment puis-je vous aider davantage ?"
      };
      fallbackContent = generalResponses[expertId as keyof typeof generalResponses] || generalResponses.default;
    }
    
    // Ajouter une note discr√®te sur le mode de secours
    fallbackContent += "\n\nüíô *Je suis pleinement pr√©sent(e) pour vous √©couter.*";
    
    return {
      content: fallbackContent,
      emotional_tone: expert?.personality.tone || 'empathetic',
      therapeutic_intention: 'support',
      techniques_used: ['√©coute active', 'empathie'],
      followup_suggestions: [
        "Pouvez-vous m'en dire plus sur ce que vous ressentez ?",
        "Comment puis-je vous accompagner au mieux aujourd'hui ?",
        "Y a-t-il quelque chose de sp√©cifique que vous aimeriez explorer ?"
      ],
      crisis_indicators_detected: false,
      adaptation_notes: [`Mode de secours activ√© pour ${expertName} - R√©ponse adapt√©e au contexte`]
    };
  }

  /**
   * M√âTHODES UTILITAIRES POUR AM√âLIORER LA QUALIT√â OPENAI
   */
  
  private analyzeUsedTechniques(response: string, availableTechniques: string[]): string[] {
    const detectedTechniques = [];
    const lowerResponse = response.toLowerCase();
    
    // D√©tection de techniques par mots-cl√©s et patterns
    if (lowerResponse.includes('question') || lowerResponse.includes('?')) {
      detectedTechniques.push('questionnement th√©rapeutique');
    }
    if (lowerResponse.includes('comprends') || lowerResponse.includes('entends')) {
      detectedTechniques.push('validation empathique');
    }
    if (lowerResponse.includes('ressentez') || lowerResponse.includes('√©motions')) {
      detectedTechniques.push('exploration √©motionnelle');
    }
    if (lowerResponse.includes('techniques') || lowerResponse.includes('exercice')) {
      detectedTechniques.push('enseignement de comp√©tences');
    }
    
    // Compl√©ter avec techniques disponibles de l'expert
    availableTechniques.slice(0, 2).forEach(tech => {
      if (!detectedTechniques.includes(tech)) {
        detectedTechniques.push(tech);
      }
    });
    
    return detectedTechniques.slice(0, 3);
  }

  private inferTherapeuticIntention(response: string, userMessage: string): string {
    const lowerResponse = response.toLowerCase();
    const lowerUser = userMessage.toLowerCase();
    
    if (lowerUser.includes('crise') || lowerUser.includes('suicide') || lowerUser.includes('dangereux')) {
      return 'intervention de crise';
    }
    if (lowerResponse.includes('technique') || lowerResponse.includes('exercice')) {
      return 'enseignement de comp√©tences';
    }
    if (lowerResponse.includes('?') && lowerResponse.match(/\?/g)?.length > 1) {
      return 'exploration approfondie';
    }
    if (lowerResponse.includes('comprends') || lowerResponse.includes('difficile')) {
      return 'validation et soutien';
    }
    if (lowerResponse.includes('changement') || lowerResponse.includes('objectif')) {
      return 'orientation vers le changement';
    }
    
    return 'soutien th√©rapeutique';
  }

  private detectEmotionalTone(response: string, expertBaseTone: string): string {
    const lowerResponse = response.toLowerCase();
    
    if (lowerResponse.includes('f√©licitations') || lowerResponse.includes('progr√®s')) {
      return `${expertBaseTone}, encourageant`;
    }
    if (lowerResponse.includes('difficile') || lowerResponse.includes('comprends')) {
      return `${expertBaseTone}, compatissant`;
    }
    if (lowerResponse.includes('explorer') || lowerResponse.includes('d√©couvrir')) {
      return `${expertBaseTone}, exploratoire`;
    }
    if (lowerResponse.includes('calme') || lowerResponse.includes('respiration')) {
      return `${expertBaseTone}, apaisant`;
    }
    
    return expertBaseTone;
  }

  private async generateAdvancedFollowups(
    response: string, 
    context: TherapeuticContext, 
    expert: TherapeuticExpert
  ): Promise<string[]> {
    const followups = [];
    const lowerResponse = response.toLowerCase();
    
    // Suggestions personnalis√©es selon l'expert et le contexte
    if (expert.specialties.includes('anxi√©t√©') || expert.specialties.includes('anxiety')) {
      followups.push("Comment votre corps r√©agit-il quand cette anxi√©t√© se manifeste ?");
      followups.push("Quelles sont vos strat√©gies actuelles pour g√©rer ces moments ?");
    }
    
    if (expert.specialties.includes('d√©pression') || expert.specialties.includes('depression')) {
      followups.push("√Ä quoi ressemble une journ√©e difficile pour vous ?");
      followups.push("Y a-t-il des moments o√π vous vous sentez un peu mieux ?");
    }
    
    // Suggestions bas√©es sur le contenu de la r√©ponse
    if (lowerResponse.includes('√©motion') || lowerResponse.includes('ressent')) {
      followups.push("Pouvez-vous me d√©crire cette √©motion plus pr√©cis√©ment ?");
    }
    if (lowerResponse.includes('situation') || lowerResponse.includes('contexte')) {
      followups.push("Dans quelles autres situations ressentez-vous quelque chose de similaire ?");
    }
    
    // Suggestions culturelles si contexte disponible
    if (context.cultural_context && context.cultural_context.includes('arabe')) {
      followups.push("Comment votre famille per√ßoit-elle cette situation ?");
    }
    
    // Fallback g√©n√©ral de qualit√©
    if (followups.length === 0) {
      followups.push("Qu'est-ce qui vous semble le plus important √† explorer maintenant ?");
      followups.push("Comment puis-je vous accompagner au mieux dans cette r√©flexion ?");
    }
    
    return followups.slice(0, 3);
  }
}

export default TherapeuticAI;