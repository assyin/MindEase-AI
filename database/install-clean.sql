-- MindEase AI - Installation Propre (Clean Install)
-- ==================================================
-- Ce script installe la base de donn√©es en supprimant d'abord
-- toutes les tables existantes. ATTENTION: Toutes les donn√©es
-- existantes seront perdues !
-- ==================================================

BEGIN;

-- =====================================================
-- 1. V√âRIFICATION ET AVERTISSEMENT
-- =====================================================

DO $$
BEGIN
    RAISE NOTICE '‚ö†Ô∏è  ATTENTION: Installation propre de MindEase AI';
    RAISE NOTICE '‚ö†Ô∏è  Toutes les donn√©es existantes seront supprim√©es !';
    RAISE NOTICE '‚ö†Ô∏è  Appuyez sur Ctrl+C maintenant pour annuler';
    RAISE NOTICE '==========================================';
    
    -- Attendre quelques secondes (simulate delay)
    PERFORM pg_sleep(3);
    
    RAISE NOTICE 'üöÄ D√©but de l''installation...';
END $$;

-- =====================================================
-- 2. NETTOYAGE COMPLET (SAFE DROPS)
-- =====================================================

-- D√©sactiver les politiques RLS temporairement pour √©viter les erreurs
DO $$
DECLARE
    table_record RECORD;
BEGIN
    FOR table_record IN 
        SELECT tablename 
        FROM pg_tables 
        WHERE schemaname = 'public'
    LOOP
        BEGIN
            EXECUTE 'ALTER TABLE ' || table_record.tablename || ' DISABLE ROW LEVEL SECURITY';
        EXCEPTION
            WHEN OTHERS THEN
                -- Ignorer les erreurs (table might not have RLS)
                NULL;
        END;
    END LOOP;
END $$;

-- Supprimer toutes les politiques RLS existantes
DO $$
DECLARE
    policy_record RECORD;
BEGIN
    FOR policy_record IN 
        SELECT schemaname, tablename, policyname
        FROM pg_policies 
        WHERE schemaname = 'public'
    LOOP
        BEGIN
            EXECUTE 'DROP POLICY IF EXISTS "' || policy_record.policyname || '" ON ' || policy_record.tablename;
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE 'Could not drop policy: %', policy_record.policyname;
        END;
    END LOOP;
END $$;

-- Supprimer toutes les tables dans l'ordre des d√©pendances
DROP TABLE IF EXISTS expert_matching_history CASCADE;
DROP TABLE IF EXISTS mood_entries CASCADE;
DROP TABLE IF EXISTS notifications CASCADE;
DROP TABLE IF EXISTS conversation_insights CASCADE;
DROP TABLE IF EXISTS conversation_patterns CASCADE;
DROP TABLE IF EXISTS multi_avatar_dialogues CASCADE;
DROP TABLE IF EXISTS avatar_interactions CASCADE;
DROP TABLE IF EXISTS avatar_preferences CASCADE;
DROP TABLE IF EXISTS user_interactions CASCADE;
DROP TABLE IF EXISTS therapeutic_interactions CASCADE;
DROP TABLE IF EXISTS ai_contexts CASCADE;
DROP TABLE IF EXISTS therapeutic_profiles CASCADE;
DROP TABLE IF EXISTS assessment_sessions CASCADE;
DROP TABLE IF EXISTS assessment_templates CASCADE;
DROP TABLE IF EXISTS homework_assignments CASCADE;
DROP TABLE IF EXISTS progress_tracking CASCADE;
DROP TABLE IF EXISTS therapy_sessions CASCADE;
DROP TABLE IF EXISTS therapy_programs CASCADE;
DROP TABLE IF EXISTS messages CASCADE;
DROP TABLE IF EXISTS sessions CASCADE;
DROP TABLE IF EXISTS conversations CASCADE;
DROP TABLE IF EXISTS user_profiles CASCADE;

-- Supprimer toutes les fonctions personnalis√©es
DROP FUNCTION IF EXISTS user_owns_therapy_program(UUID, UUID) CASCADE;
DROP FUNCTION IF EXISTS user_owns_therapy_session(UUID, UUID) CASCADE;
DROP FUNCTION IF EXISTS clean_dev_data() CASCADE;
DROP FUNCTION IF EXISTS create_sample_therapy_program(UUID) CASCADE;
DROP FUNCTION IF EXISTS update_updated_at_column() CASCADE;

-- Supprimer les vues
DROP VIEW IF EXISTS user_therapy_overview CASCADE;

RAISE NOTICE '‚úÖ Nettoyage termin√©';

-- =====================================================
-- 3. CR√âATION DU SCHEMA COMPLET
-- =====================================================

-- Maintenant, ex√©cuter le schema principal
\i schema.sql

-- =====================================================
-- 4. CONFIGURATION DES POLITIQUES DE S√âCURIT√â
-- =====================================================

-- Ex√©cuter les politiques RLS
\i rls-policies.sql

-- =====================================================
-- 5. AJOUT DES DONN√âES DE BASE
-- =====================================================

-- Ex√©cuter les donn√©es de seed
\i seed-data.sql

-- =====================================================
-- 6. V√âRIFICATION FINALE
-- =====================================================

DO $$
DECLARE
    table_count INTEGER;
    policy_count INTEGER;
BEGIN
    SELECT COUNT(*) INTO table_count FROM pg_tables WHERE schemaname = 'public';
    SELECT COUNT(*) INTO policy_count FROM pg_policies WHERE schemaname = 'public';
    
    RAISE NOTICE '========================================';
    RAISE NOTICE 'üéâ Installation MindEase AI Termin√©e !';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'Tables cr√©√©es: % tables', table_count;
    RAISE NOTICE 'Politiques RLS: % politiques', policy_count;
    RAISE NOTICE 'Status: ‚úÖ Pr√™t pour utilisation';
    RAISE NOTICE '========================================';
    RAISE NOTICE 'Vous pouvez maintenant:';
    RAISE NOTICE '1. Red√©marrer votre application';
    RAISE NOTICE '2. Cr√©er votre compte utilisateur';
    RAISE NOTICE '3. Commencer √† utiliser MindEase AI';
    RAISE NOTICE '========================================';
END $$;

COMMIT;

-- Message final
NOTIFY pgsql, 'MindEase AI Database: Installation compl√®te r√©ussie!';